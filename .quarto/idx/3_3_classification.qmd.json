{"title":"9.1. K-최근접 이웃","markdown":{"yaml":{"jupyter":"python3"},"headingText":"9.1. K-최근접 이웃","containsRefs":false,"markdown":"\n\n<h1>9. 분류</h1>\n\n+ 분류(classification)\n  + 지도학습의 한 종류로, 라벨(label)이 있는 데이터를 기반으로 각 데이터가 속하는 집단(category) 간의 관계를 학습함\n  + 학습된 모델은 새로운 데이터가 어떤 집단에 속하는지 자동으로 판별할 수 있음\n  + 대표적인 알고리즘으로는 k-최근접 이웃(K-NN), 의사결정트리(decision tree), 나이브 베이즈(naive bayes), 서포트 벡터 머신(SVM) 등이 있음\n  + 활용 사례: 스팸 문자 분류, 수능 점수 기반 등급 판별, 의료 진단(암 유무 판별), 이미지 속 객체 인식(강아지와 고양이 분류)  \n\n<br>\n\n+ K-최근접 이웃(K-Nearest Neighbors)\n  + 입력된 데이터로부터 거리가 가까운 k개의 기존 데이터 레이블을 참조하여 가장 많이 속한 라벨로 입력된 데이터를 라벨링하는 방법\n  + 일반적으로 k의 개수는 동점 상황을 만들지 않기 위해 홀수로 지정함\n  + 거리 계산에는 보통 유클리디안 거리(Euclidean distance)를 사용함\n\n![](./images/fig3-7.jpg){width=50%}\n\n<br>\n\n+ k의 수\n  + K-NN 알고리즘은 탐색할 이웃의 개수(k)에 따라 분류가 달라질 수 있음\n    + k가 너무 크면, 데이터의 세세한 패턴을 반영하지 못해 과소적합(underfitting)이 발생함\n    + k가 너무 작으면, 개별 데이터에 민감하게 반응하여 과적합(overfitting)이 발생함\n  + 일반적으로 최적의 k 값은 교차검증(cross-validation)을 통해 테스트 오차(test error)를 최소홯는 값으로 결정함\n\n![](./images/fig3-8.jpg){width=70%}\n\n<br>\n\n```{python}\n# 라이브러리 불러오기\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 448}\n# 원두맛에 대한 데이터 생성\nfrom sklearn.neighbors import KNeighborsClassifier\nx = [4, 5, 10, 4, 3, 11, 14 , 8, 10, 12] \ny = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21]\nclasses = [0, 0, 1, 0, 0, 1, 1, 0, 1, 1]\n\nplt.style.use('default')\nplt.scatter(x, y, c=classes)\nplt.show()\ndata = list(zip(x, y))\nprint(data)\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 448}\n# k=1\nknn = KNeighborsClassifier(n_neighbors=1)\nknn.fit(data, classes)\nnew_x = 8\nnew_y = 21\nnew_point = [(new_x, new_y)]\nprediction = knn.predict(new_point)\nprint(prediction)\nplt.scatter(x + [new_x], y + [new_y], c=classes + [prediction[0]])\nplt.text(x=new_x-1.7, y=new_y-0.7, s=f\"new point, class: {prediction[0]}\")\nplt.show()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 430}\n# k=5\nknn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(data, classes)\nprediction = knn.predict(new_point)\nprint(prediction)\nplt.scatter(x + [new_x], y + [new_y], c=classes + [prediction[0]])\nplt.text(x=new_x-1.7, y=new_y-0.7, s=f\"new point, class: {prediction[0]}\")\nplt.show()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n# 교차검증으로 k찾기\nfrom sklearn.model_selection import cross_val_score\n\nknn=KNeighborsClassifier()\nscores=cross_val_score(knn,data,classes,cv=3, scoring='accuracy')\n\nfor i in range(scores.size):\n    print(f\"{i+1}번째 정확도: {scores[i]}\")\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 394}\n# 표준화 예제 데이터 생성\ndf = pd.DataFrame({'A' : np.arange(11), 'B' : np.arange(11) ** 2})\ndf\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 394}\n# Standard Scaler\nfrom sklearn.preprocessing import StandardScaler\nstandardScaler = StandardScaler()\ndf_standardScaled = standardScaler.fit_transform(df)\npd.DataFrame(df_standardScaled, columns = ['A_std', 'B_std'])\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 394}\n#MinMaxScaler\nfrom sklearn.preprocessing import MinMaxScaler\nminmaxScaler = MinMaxScaler()\n\ndf_minmaxScaled = minmaxScaler.fit_transform(df)\npd.DataFrame(df_minmaxScaled, columns = ['A_minmax', 'B_minmax'])\n```\n\n<br>\n\n## 9.2. (실습) 드라마 분류\n\n<br>\n\n```{python}\n#| scrolled: true\n# 11.2 드라마분류하기\ndf = pd.read_csv('./data/chap11_movie_genre_final.csv')\ndf.head(3)\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\ndf.info()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 639}\nplt.figure(figsize=(8, 3))\nsns.histplot(df['target'], bins=20, kde=True)\nplt.title(\"movie count\")\nplt.show()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 639}\nplt.figure(figsize=(8, 3))\nsns.histplot(df['vote_average'], bins=20, kde=True)\nplt.title(\"vote_average\")\nplt.show()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\nprint(df.columns)\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\ncount_list=[]\ngenre_list=['Action', 'Adventure','Fantasy', 'ScienceFiction', 'Crime', 'Drama', 'Thriller', 'Animation','Family', 'Western', 'Comedy', 'Romance', 'Horror', 'Mystery','History', 'War', 'Music', 'Documentary', 'Foreign', 'TVMovie']\n\nfor i in genre_list:\n  count_list.append(len(df[df[i]==1]))\n\ncount_list\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 891}\nplt.figure(figsize=(5, 5))\nplt.barh(genre_list,count_list,color=sns.color_palette('hls',20))\nplt.show()\n```\n\n```{python}\nfor i in range(len(genre_list)):\n  print(f'{genre_list[i]} : {count_list[i]}')\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\ntemp = (df.Drama==1)&(df.vote_average>=6.5)\ndf[temp]\nprint(f'드라마 장르 영화 2281편 중 평점 6.5 이상:{len(df[temp])}편')\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\ntemp = (df.Comedy==1)&(df.vote_average>=6.5)\ndf[temp]\nprint(f'코메디 장르 영화 1714편 중 평점 6.5 이상:{len(df[temp])}편')\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\ntemp = (df.Thriller==1)&(df.vote_average>=6.5)\ndf[temp]\nprint(f'스릴러 영화 1270편 중 평점 6.5 이상:{len(df[temp])}편')\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\ntemp = (df.Action==1)&(df.vote_average>=6.5)\ndf[temp]\nprint(f'액션 영화 1140편 중 평점 6.5 이상:{len(df[temp])}편')\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n1208/2218\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n521/1714\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n415/1270\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n355/1140\n```\n\n```{python}\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\nx=df[['Action', 'Adventure', 'Fantasy', 'ScienceFiction', 'Crime', 'Drama', 'Thriller', 'Animation', 'Family', 'Western', 'Comedy', 'Romance', 'Horror', 'Mystery', 'History', 'War', 'Music', 'Documentary', 'Foreign', 'TVMovie']]\ny=df[['target']]\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split( x, y, test_size=0.2)\nprint(x_train.shape)\nprint(x_test.shape)\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\nfrom sklearn.model_selection import cross_val_score\nknn = KNeighborsClassifier()\nscores=cross_val_score(knn, x_train, y_train, cv=2, scoring='accuracy')\n\nfor i in range(scores.size):\n    print(f\"{i+1}번째 정확도: {scores[i]}\")\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\nfrom sklearn.neighbors import KNeighborsClassifier\n\nneigh=KNeighborsClassifier(n_neighbors=5)\nneigh.fit(x_train, y_train)\nprint(neigh.classes_)\nprint(f'거리계산방법: {neigh.effective_metric_}')\nprint(f'샘플수: {neigh.n_samples_fit_}')\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\nprint(neigh.score(x_test,y_test))\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\nnew_x = [1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\nnew_df = pd.DataFrame([new_x], columns=x_train.columns)\nprediction = neigh.predict(new_df)\nprediction\n```\n\n```{python}\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import datasets\ndiabetes = datasets.load_diabetes()\nx = diabetes.data[:150]\ny = diabetes.target[:150]\nknn=KNeighborsClassifier()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\nscores=cross_val_score(knn,x,y,cv=3,scoring='accuracy')\nfor i in range(scores.size):\n    print(f\"{i+1}번째 정확도: {scores[i]}\")\n```\n\n<br>\n\n## 9.3. (실습) 농구선수 분류\n\n<br>\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 206}\ndf = pd.read_csv('./data/chap11_basketball_final.csv')\ndf.head()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\ndf.info()\n```\n\n```{python}\ndf['Target'].value_counts()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 425}\n# 경력별 선수의 수\nplt.figure(figsize=(5, 3))\nsns.countplot(x=df['Target']) \nplt.title(\"Player\")\nplt.show()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n# 경력에 따른 농구 기술\nprint(f\"리바운드\\n {df['Rebounds'].groupby(df['Target']).mean()}\")\nprint(f\"어시스트\\n {df['Assists'].groupby(df['Target']).mean()}\")\nprint(f\"스틸\\n {df['Steals'].groupby(df['Target']).mean()}\")\nprint(f\"블록\\n {df['Blocks'].groupby(df['Target']).mean()}\")\nprint(f\"턴오버\\n {df['Turnovers'].groupby(df['Target']).mean()}\")\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n# 훈련데이터와 테스트데이터 분리\nx=df[['Rebounds','Assists','Steals','Blocks','Turnovers']]\ny=df[['Target']]\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split( x, y, test_size=0.2)\nprint(x_train.shape)\nprint(x_test.shape)\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n# 최적의 k찾기\nfrom sklearn.model_selection import cross_val_score\nknn=KNeighborsClassifier()\nscores=cross_val_score(knn,x,y,cv=5, scoring='accuracy')\n\nfor i in range(scores.size):\n    print(f\"{i+1}번째 정확도: {scores[i]}\")\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n# 모델 생성과 학습\nfrom sklearn.neighbors import KNeighborsClassifier\nneigh=KNeighborsClassifier(n_neighbors=7)\nneigh.fit(x_train, y_train)\nprint(neigh.classes_)\nprint(f'거리계산방법: {neigh.effective_metric_}')\nprint(f'샘플수: {neigh.n_samples_fit_}')\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\nprint(neigh.score(x_test,y_test))\nnew_x = [3,3,2,2,4]\nprediction = neigh.predict([new_x])\nprint(prediction)\n```\n\n","srcMarkdownNoYaml":"\n\n<h1>9. 분류</h1>\n\n## 9.1. K-최근접 이웃\n+ 분류(classification)\n  + 지도학습의 한 종류로, 라벨(label)이 있는 데이터를 기반으로 각 데이터가 속하는 집단(category) 간의 관계를 학습함\n  + 학습된 모델은 새로운 데이터가 어떤 집단에 속하는지 자동으로 판별할 수 있음\n  + 대표적인 알고리즘으로는 k-최근접 이웃(K-NN), 의사결정트리(decision tree), 나이브 베이즈(naive bayes), 서포트 벡터 머신(SVM) 등이 있음\n  + 활용 사례: 스팸 문자 분류, 수능 점수 기반 등급 판별, 의료 진단(암 유무 판별), 이미지 속 객체 인식(강아지와 고양이 분류)  \n\n<br>\n\n+ K-최근접 이웃(K-Nearest Neighbors)\n  + 입력된 데이터로부터 거리가 가까운 k개의 기존 데이터 레이블을 참조하여 가장 많이 속한 라벨로 입력된 데이터를 라벨링하는 방법\n  + 일반적으로 k의 개수는 동점 상황을 만들지 않기 위해 홀수로 지정함\n  + 거리 계산에는 보통 유클리디안 거리(Euclidean distance)를 사용함\n\n![](./images/fig3-7.jpg){width=50%}\n\n<br>\n\n+ k의 수\n  + K-NN 알고리즘은 탐색할 이웃의 개수(k)에 따라 분류가 달라질 수 있음\n    + k가 너무 크면, 데이터의 세세한 패턴을 반영하지 못해 과소적합(underfitting)이 발생함\n    + k가 너무 작으면, 개별 데이터에 민감하게 반응하여 과적합(overfitting)이 발생함\n  + 일반적으로 최적의 k 값은 교차검증(cross-validation)을 통해 테스트 오차(test error)를 최소홯는 값으로 결정함\n\n![](./images/fig3-8.jpg){width=70%}\n\n<br>\n\n```{python}\n# 라이브러리 불러오기\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 448}\n# 원두맛에 대한 데이터 생성\nfrom sklearn.neighbors import KNeighborsClassifier\nx = [4, 5, 10, 4, 3, 11, 14 , 8, 10, 12] \ny = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21]\nclasses = [0, 0, 1, 0, 0, 1, 1, 0, 1, 1]\n\nplt.style.use('default')\nplt.scatter(x, y, c=classes)\nplt.show()\ndata = list(zip(x, y))\nprint(data)\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 448}\n# k=1\nknn = KNeighborsClassifier(n_neighbors=1)\nknn.fit(data, classes)\nnew_x = 8\nnew_y = 21\nnew_point = [(new_x, new_y)]\nprediction = knn.predict(new_point)\nprint(prediction)\nplt.scatter(x + [new_x], y + [new_y], c=classes + [prediction[0]])\nplt.text(x=new_x-1.7, y=new_y-0.7, s=f\"new point, class: {prediction[0]}\")\nplt.show()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 430}\n# k=5\nknn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(data, classes)\nprediction = knn.predict(new_point)\nprint(prediction)\nplt.scatter(x + [new_x], y + [new_y], c=classes + [prediction[0]])\nplt.text(x=new_x-1.7, y=new_y-0.7, s=f\"new point, class: {prediction[0]}\")\nplt.show()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n# 교차검증으로 k찾기\nfrom sklearn.model_selection import cross_val_score\n\nknn=KNeighborsClassifier()\nscores=cross_val_score(knn,data,classes,cv=3, scoring='accuracy')\n\nfor i in range(scores.size):\n    print(f\"{i+1}번째 정확도: {scores[i]}\")\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 394}\n# 표준화 예제 데이터 생성\ndf = pd.DataFrame({'A' : np.arange(11), 'B' : np.arange(11) ** 2})\ndf\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 394}\n# Standard Scaler\nfrom sklearn.preprocessing import StandardScaler\nstandardScaler = StandardScaler()\ndf_standardScaled = standardScaler.fit_transform(df)\npd.DataFrame(df_standardScaled, columns = ['A_std', 'B_std'])\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 394}\n#MinMaxScaler\nfrom sklearn.preprocessing import MinMaxScaler\nminmaxScaler = MinMaxScaler()\n\ndf_minmaxScaled = minmaxScaler.fit_transform(df)\npd.DataFrame(df_minmaxScaled, columns = ['A_minmax', 'B_minmax'])\n```\n\n<br>\n\n## 9.2. (실습) 드라마 분류\n\n<br>\n\n```{python}\n#| scrolled: true\n# 11.2 드라마분류하기\ndf = pd.read_csv('./data/chap11_movie_genre_final.csv')\ndf.head(3)\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\ndf.info()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 639}\nplt.figure(figsize=(8, 3))\nsns.histplot(df['target'], bins=20, kde=True)\nplt.title(\"movie count\")\nplt.show()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 639}\nplt.figure(figsize=(8, 3))\nsns.histplot(df['vote_average'], bins=20, kde=True)\nplt.title(\"vote_average\")\nplt.show()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\nprint(df.columns)\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\ncount_list=[]\ngenre_list=['Action', 'Adventure','Fantasy', 'ScienceFiction', 'Crime', 'Drama', 'Thriller', 'Animation','Family', 'Western', 'Comedy', 'Romance', 'Horror', 'Mystery','History', 'War', 'Music', 'Documentary', 'Foreign', 'TVMovie']\n\nfor i in genre_list:\n  count_list.append(len(df[df[i]==1]))\n\ncount_list\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 891}\nplt.figure(figsize=(5, 5))\nplt.barh(genre_list,count_list,color=sns.color_palette('hls',20))\nplt.show()\n```\n\n```{python}\nfor i in range(len(genre_list)):\n  print(f'{genre_list[i]} : {count_list[i]}')\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\ntemp = (df.Drama==1)&(df.vote_average>=6.5)\ndf[temp]\nprint(f'드라마 장르 영화 2281편 중 평점 6.5 이상:{len(df[temp])}편')\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\ntemp = (df.Comedy==1)&(df.vote_average>=6.5)\ndf[temp]\nprint(f'코메디 장르 영화 1714편 중 평점 6.5 이상:{len(df[temp])}편')\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\ntemp = (df.Thriller==1)&(df.vote_average>=6.5)\ndf[temp]\nprint(f'스릴러 영화 1270편 중 평점 6.5 이상:{len(df[temp])}편')\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\ntemp = (df.Action==1)&(df.vote_average>=6.5)\ndf[temp]\nprint(f'액션 영화 1140편 중 평점 6.5 이상:{len(df[temp])}편')\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n1208/2218\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n521/1714\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n415/1270\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n355/1140\n```\n\n```{python}\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\nx=df[['Action', 'Adventure', 'Fantasy', 'ScienceFiction', 'Crime', 'Drama', 'Thriller', 'Animation', 'Family', 'Western', 'Comedy', 'Romance', 'Horror', 'Mystery', 'History', 'War', 'Music', 'Documentary', 'Foreign', 'TVMovie']]\ny=df[['target']]\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split( x, y, test_size=0.2)\nprint(x_train.shape)\nprint(x_test.shape)\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\nfrom sklearn.model_selection import cross_val_score\nknn = KNeighborsClassifier()\nscores=cross_val_score(knn, x_train, y_train, cv=2, scoring='accuracy')\n\nfor i in range(scores.size):\n    print(f\"{i+1}번째 정확도: {scores[i]}\")\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\nfrom sklearn.neighbors import KNeighborsClassifier\n\nneigh=KNeighborsClassifier(n_neighbors=5)\nneigh.fit(x_train, y_train)\nprint(neigh.classes_)\nprint(f'거리계산방법: {neigh.effective_metric_}')\nprint(f'샘플수: {neigh.n_samples_fit_}')\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\nprint(neigh.score(x_test,y_test))\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\nnew_x = [1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\nnew_df = pd.DataFrame([new_x], columns=x_train.columns)\nprediction = neigh.predict(new_df)\nprediction\n```\n\n```{python}\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import datasets\ndiabetes = datasets.load_diabetes()\nx = diabetes.data[:150]\ny = diabetes.target[:150]\nknn=KNeighborsClassifier()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\nscores=cross_val_score(knn,x,y,cv=3,scoring='accuracy')\nfor i in range(scores.size):\n    print(f\"{i+1}번째 정확도: {scores[i]}\")\n```\n\n<br>\n\n## 9.3. (실습) 농구선수 분류\n\n<br>\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 206}\ndf = pd.read_csv('./data/chap11_basketball_final.csv')\ndf.head()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\ndf.info()\n```\n\n```{python}\ndf['Target'].value_counts()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 425}\n# 경력별 선수의 수\nplt.figure(figsize=(5, 3))\nsns.countplot(x=df['Target']) \nplt.title(\"Player\")\nplt.show()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n# 경력에 따른 농구 기술\nprint(f\"리바운드\\n {df['Rebounds'].groupby(df['Target']).mean()}\")\nprint(f\"어시스트\\n {df['Assists'].groupby(df['Target']).mean()}\")\nprint(f\"스틸\\n {df['Steals'].groupby(df['Target']).mean()}\")\nprint(f\"블록\\n {df['Blocks'].groupby(df['Target']).mean()}\")\nprint(f\"턴오버\\n {df['Turnovers'].groupby(df['Target']).mean()}\")\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n# 훈련데이터와 테스트데이터 분리\nx=df[['Rebounds','Assists','Steals','Blocks','Turnovers']]\ny=df[['Target']]\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split( x, y, test_size=0.2)\nprint(x_train.shape)\nprint(x_test.shape)\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n# 최적의 k찾기\nfrom sklearn.model_selection import cross_val_score\nknn=KNeighborsClassifier()\nscores=cross_val_score(knn,x,y,cv=5, scoring='accuracy')\n\nfor i in range(scores.size):\n    print(f\"{i+1}번째 정확도: {scores[i]}\")\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n# 모델 생성과 학습\nfrom sklearn.neighbors import KNeighborsClassifier\nneigh=KNeighborsClassifier(n_neighbors=7)\nneigh.fit(x_train, y_train)\nprint(neigh.classes_)\nprint(f'거리계산방법: {neigh.effective_metric_}')\nprint(f'샘플수: {neigh.n_samples_fit_}')\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\nprint(neigh.score(x_test,y_test))\nnew_x = [3,3,2,2,4]\nprediction = neigh.predict([new_x])\nprint(prediction)\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"toc-depth":2,"output-file":"3_3_classification.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","theme":["cerulean"],"jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}