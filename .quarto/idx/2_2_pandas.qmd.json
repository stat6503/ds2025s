{"title":"4.1. 데이터프레임","markdown":{"yaml":{"jupyter":"python3"},"headingText":"4.1. 데이터프레임","containsRefs":false,"markdown":"\n\n<h1>4. Pandas</h1>\n\n+ Pandas 라이브러리\n  + NumPy 라이브러리를 기반으로 개발된 Python 데이터 분석 라이브러리\n  + 다양한 형태의 데이터를 효율적으로 처리하고 탐색할 수 있음\n  + 필터링, 정렬, 그룹화, 집계, 결측치 처리 등 다양한 분석 기능 제공\n\n<br>\n\n+ 시리즈(Series)\n  + 1차원 데이터를 다루는 자료구조\n  + 리스트와 달리 각 데이터에 인덱스를 지정할 수 있음\n\n<br>\n\n+ 데이터프레임(DataFrame)\n  + 2차원 데이터를 다루는 자료구조\n  + 행(row)과 열(column)로 이루어진 표(table) 형태의 구조를 가짐\n    + 행(row) : 각 개별 데이터를 표현하며, 케이스(case)라고도 함\n    + 열(column) : 속성을 표현하며, 변수(variable)라고도 함 \n    + 인덱스(index) : 각 개별 데이터를 특정할 수 있는 고유의 값으로, 행을 구분함\n  + 열 단위로 서로 다른 자료형을 저장할 수 있으며, 각 열에는 동일한 자료형만 포함되어야 함\n\n<br>\n\n![](./images/fig2-2.jpg){width=50%}\n\n<br>\n\n## 4.2. 데이터프레임 생성\n+ 데이터프레임 생성\n  1. Pandas 라이브러리의 `DataFrame()` 함수\n     + 데이터를 직접 입력하는 방법으로, 일반적으로 딕셔너리를 많이 사용함\n       + 키(key) : 열 이름\n       + 값(value) : 각 열의 데이터\n  3. Pandas 라이브러리의 `read_csv()` 함수\n     + 외부에 있는 csv 파일을 읽어 데이터프레임으로 생성함\n     + 한글이 포함된 경우 `encoding='euc-kr'` 또는 `encoding='cp949'` 옵션을 지정해야 함\n     + \\[실습파일\\] [exam.csv](./data/exam.csv), [music.csv](./data/music.csv), [weather.csv](./data/weather.csv), [train.csv](./data/train.csv)\n\n<br>\n\n```{python}\n# Pandas 라이브러리 설치\n#!pip install pandas\n```\n\n```{python}\n# Pandas 라이브러리 불러오기\nimport pandas as pd\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n# 데이터프레임 생성1\ndf = pd.DataFrame({\n    'name': ['Jang', 'Yang', 'Oh'],\n    'dept': ['computer', 'english', 'math'],\n    'score': [100, 90, 50]})\ndf\n```\n\n```{python}\n# 데이터프레임 생성2\ndf = pd.read_csv('./data/exam.csv')\ndf\n```\n\n<br>\n\n## 4.3. 데이터프레임 확인\n+ 데이터 분석 시 가장 먼저 데이터의 전반적인 구조를 파악해야 함\n\n<br>\n\n```{python}\n# 데이터 불러오기\ndf = pd.read_csv(\"./data/music.csv\")\ndf\n```\n\n```{python}\n# 변수 속성\ndf.info()\n```\n\n```{python}\n# 데이터 앞부분/뒷부분\ndf.head()\n# df.tail()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n# 요약 통계량 : 수치형 변수\ndf.describe()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 270}\n# 요약 통계량 : 문자형 변수\ndf.describe(include='object')\n```\n\n```{python}\n# 인덱스\ndf.index\n```\n\n```{python}\n# 열\ndf.columns\n```\n\n```{python}\n# 각 열의 자료형\ndf.dtypes\n```\n\n```{python}\n# 정렬 : 오름차순(기본)\ndf.sort_values('release_date')\n```\n\n```{python}\n# 빈도\ncnt = df['agency'].value_counts()\npd.DataFrame(cnt)\n```\n\n```{python}\n# 고유값\ndf['agency'].unique()\n```\n\n<br>\n\n## 4.4. 데이터프레임 선택\n\n![](./images/fig2-3.jpg){width=70%}\n\n<br>\n\n### 4.4.1. 열 선택\n+ 데이터프레임에서 특정 열을 선택할 때는 `[]` 안에 열 이름을 문자열로 입력함\n  + 여러 개의 열을 선택하는 경우, 열 이름을 리스트로 전달함\n+ 하나의 열만 선택하는 경우, `(데이터프레임 이름).(열 이름)` 형식으로도 접근할 수 있음\n   \n<br>\n\n```{python}\n# 열 선택1\ndf = pd.read_csv('./data/weather.csv', encoding='cp949')\ndf['평균기온']\n```\n\n```{python}\n# 열 선택2\ndf[['최저기온', '최고기온']]\n```\n\n<br>\n\n### 4.4.2. 레이블이나 조건 표현으로 선택\n+ 레이블(label)을 기반으로 행과 열을 선택할 때 `loc[]` 속성을 사용함\n  + 열 이름을 이용하여 특정 열을 선택할 수 있음\n  + 인덱스 이름을 이용하여 특정 행을 선택할 수 있음\n  + 조건식을 사용하여 특정 조건을 만족하는 행을 선택할 수 있음\n    + 조건이 2개 이상인 경우, 각 조건을 `()`로 묶고 논리 연산자(`&`, `|`, `~`)를 사용함\n\n<br>\n\n```{python}\n# 열 선택3\ndf.loc[:, ['날짜', '최고기온']]\n```\n\n```{python}\n# 행 선택1\ndf.loc[0:3,]\n```\n\n```{python}\n# 행 선택2 : 날짜 데이터를 인덱스로 지정 후, 특정 날짜에 해당하는 행 선택\ndf.index = df['날짜']\ndf.loc['2022-06-05']\n```\n\n```{python}\n# 헹 선택3 : 조건을 만족하는 행 선택\ndf.loc[df['평균기온']>=25]\n```\n\n<br>\n\n### 4.4.3. 불 인덱싱\n+ 조건식을 사용하면 각 행이 조건을 만족하는지 여부를 `True` 또는 `False`로 반환함\n+ 그 결과인 부울(boolean)형 시리즈를 `[]`에 전달하면 `True`에 해당하는 행만 선택할 수 있음\n+ 조건이 2개 이상인 경우, 각 조건을 `()`로 묶고 논리 연산자(`&`, `|`, `~`)를 사용함\n\n<br>\n\n```{python}\n# 불 인덱싱1 : 조건을 만족하는 행 선택\nw = df['최고기온']>=30\ndf[w]\n```\n\n```{python}\n# 불 인덱싱2 : 조건을 만족하는 행과 특정 열 선택\nw = df['최고기온']>=30\ndf[w][['최저기온', '최고기온']]\n```\n\n```{python}\n# 불 인덱싱3 : 제일 더웠던 날 선택\nw = df['최고기온']==df['최고기온'].max()\ndf[w]\n```\n\n```{python}\n# [Note] 특정 조건을 만족하는 데이터 선택\ndf.query('최고기온-최저기온>=10')\n```\n\n<br>\n\n## 4.5. 데이터 가공 및 그룹핑\n### 4.5.1. 데이터 가공\n+ `drop()` 메소드를 이용하여 특정 행 또는 열을 삭제할 수 있음\n  + 행 삭제(axis=0) : index 인자에 삭제할 행에 대한 인덱스를 지정함\n    + 특정 조건을 만족하는 행의 위치에 대한 인덱스를 추출하려면 `index` 속성을 이용함\n  + 열 삭제(axis=1) : columns 인자에 삭제할 열 이름을 리스트 형태로 지정함\n  + 원본 데이터를 직접 수정하려면 `inplace=True` 옵션을 지정함\n\n<br>\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 206}\n# 데이터 불러오기\ndf = pd.read_csv(\"./data/music.csv\")\ndf\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 206}\n# 여러 개의 열 삭제\ndf.drop(columns = ['sortation', 'agency'], inplace=True)\ndf.columns\n```\n\n```{python}\n# 열 이름 변경\ndf.columns = ['제목', '이름', '인원수', '발매일', '장르', '유형']\ndf.head()\n```\n\n```{python}\n# 발매일 변수를 datetime 형식으로 변환\ndf['발매일'] = pd.to_datetime(df['발매일'])\ndf.dtypes\n```\n\n```{python}\n# 새로운 열 생성\ndf['년도'] = df['발매일'].dt.year\ndf['월'] = df['발매일'].dt.month\ndf['일'] = df['발매일'].dt.day\ndf.head()\n```\n\n<br>\n\n### 4.5.2. 데이터 그룹핑\n+ `groupby()` 메소드를 이용하여 특정 열을 기준으로 데이터를 그룹화할 수 있음\n+ 통계량을 산출하는 메소드 `mean()`, `std()`, `var()`, `max()`, `min()`, `mode()` 등과 함께 사용됨\n\n<br>\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 347}\n# 데이터 그룹핑1\nnewdata = df.groupby(['장르']).count()                            # df.value_counts('장르')\npd.DataFrame(newdata['제목'])\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 253}\n# 데이터 그룹핑2\nnewdata = df.groupby(['장르'])['인원수'].mean()\npd.DataFrame(newdata)\n```\n\n<br>\n\n## 4.6. 결측 데이터 처리\n+ 결측 데이터(missing value)\n  + Pandas는 누락된 데이터를 `NaN`(Not a Number)로 표기하며, 연산 시 자동으로 제외됨\n  + `isna()`, `isnull()` 메소드를 이용하면 결측값을 확인할 수 있음\n\n<br>\n\n+ 결측 데이터 처리\n  + 가장 간단한 방법은 `dropna()` 메소드를 이용하여 결측값이 포함된 행이나 열을 삭제하는 것임\n    + `axis=0`이면 행, `axis=1`이면 열을 삭제함\n  + `fillna()` 메소드를 이용하여 결측값을 최빈값이나 평균으로 대체할 수도 있음\n\n<br>\n\n```{python}\n# 데이터 불러오기\ndf = pd.read_csv(\"./data/train.csv\")\ndf\n```\n\n```{python}\n# 결측값 확인\ndf[df['Embarked'].isna()]\n```\n\n```{python}\n# 각 열별 결측값 개수 확인\ndf.isnull().sum()\n```\n\n```{python}\n# 결측값이 포함된 열 삭제\ndf.drop('Cabin', axis=1, inplace=True)\ndf.columns\n```\n\n```{python}\n# 결측값이 포함된 행 삭제\ndf.dropna(axis=0)\n```\n\n```{python}\n# 결측값을 최빈값으로 대체\nembarked_mode = df['Embarked'].mode()[0]\ndf['Embarked'] = df['Embarked'].fillna(embarked_mode)\ndf.isnull().sum()\n```\n\n```{python}\n# 결측값을 평균으로 대체\nage_mean = df['Age'].mean()\ndf['Age'] = df['Age'].fillna(age_mean)\ndf.isnull().sum()\n```\n\n","srcMarkdownNoYaml":"\n\n<h1>4. Pandas</h1>\n\n## 4.1. 데이터프레임\n+ Pandas 라이브러리\n  + NumPy 라이브러리를 기반으로 개발된 Python 데이터 분석 라이브러리\n  + 다양한 형태의 데이터를 효율적으로 처리하고 탐색할 수 있음\n  + 필터링, 정렬, 그룹화, 집계, 결측치 처리 등 다양한 분석 기능 제공\n\n<br>\n\n+ 시리즈(Series)\n  + 1차원 데이터를 다루는 자료구조\n  + 리스트와 달리 각 데이터에 인덱스를 지정할 수 있음\n\n<br>\n\n+ 데이터프레임(DataFrame)\n  + 2차원 데이터를 다루는 자료구조\n  + 행(row)과 열(column)로 이루어진 표(table) 형태의 구조를 가짐\n    + 행(row) : 각 개별 데이터를 표현하며, 케이스(case)라고도 함\n    + 열(column) : 속성을 표현하며, 변수(variable)라고도 함 \n    + 인덱스(index) : 각 개별 데이터를 특정할 수 있는 고유의 값으로, 행을 구분함\n  + 열 단위로 서로 다른 자료형을 저장할 수 있으며, 각 열에는 동일한 자료형만 포함되어야 함\n\n<br>\n\n![](./images/fig2-2.jpg){width=50%}\n\n<br>\n\n## 4.2. 데이터프레임 생성\n+ 데이터프레임 생성\n  1. Pandas 라이브러리의 `DataFrame()` 함수\n     + 데이터를 직접 입력하는 방법으로, 일반적으로 딕셔너리를 많이 사용함\n       + 키(key) : 열 이름\n       + 값(value) : 각 열의 데이터\n  3. Pandas 라이브러리의 `read_csv()` 함수\n     + 외부에 있는 csv 파일을 읽어 데이터프레임으로 생성함\n     + 한글이 포함된 경우 `encoding='euc-kr'` 또는 `encoding='cp949'` 옵션을 지정해야 함\n     + \\[실습파일\\] [exam.csv](./data/exam.csv), [music.csv](./data/music.csv), [weather.csv](./data/weather.csv), [train.csv](./data/train.csv)\n\n<br>\n\n```{python}\n# Pandas 라이브러리 설치\n#!pip install pandas\n```\n\n```{python}\n# Pandas 라이브러리 불러오기\nimport pandas as pd\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n# 데이터프레임 생성1\ndf = pd.DataFrame({\n    'name': ['Jang', 'Yang', 'Oh'],\n    'dept': ['computer', 'english', 'math'],\n    'score': [100, 90, 50]})\ndf\n```\n\n```{python}\n# 데이터프레임 생성2\ndf = pd.read_csv('./data/exam.csv')\ndf\n```\n\n<br>\n\n## 4.3. 데이터프레임 확인\n+ 데이터 분석 시 가장 먼저 데이터의 전반적인 구조를 파악해야 함\n\n<br>\n\n```{python}\n# 데이터 불러오기\ndf = pd.read_csv(\"./data/music.csv\")\ndf\n```\n\n```{python}\n# 변수 속성\ndf.info()\n```\n\n```{python}\n# 데이터 앞부분/뒷부분\ndf.head()\n# df.tail()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n# 요약 통계량 : 수치형 변수\ndf.describe()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 270}\n# 요약 통계량 : 문자형 변수\ndf.describe(include='object')\n```\n\n```{python}\n# 인덱스\ndf.index\n```\n\n```{python}\n# 열\ndf.columns\n```\n\n```{python}\n# 각 열의 자료형\ndf.dtypes\n```\n\n```{python}\n# 정렬 : 오름차순(기본)\ndf.sort_values('release_date')\n```\n\n```{python}\n# 빈도\ncnt = df['agency'].value_counts()\npd.DataFrame(cnt)\n```\n\n```{python}\n# 고유값\ndf['agency'].unique()\n```\n\n<br>\n\n## 4.4. 데이터프레임 선택\n\n![](./images/fig2-3.jpg){width=70%}\n\n<br>\n\n### 4.4.1. 열 선택\n+ 데이터프레임에서 특정 열을 선택할 때는 `[]` 안에 열 이름을 문자열로 입력함\n  + 여러 개의 열을 선택하는 경우, 열 이름을 리스트로 전달함\n+ 하나의 열만 선택하는 경우, `(데이터프레임 이름).(열 이름)` 형식으로도 접근할 수 있음\n   \n<br>\n\n```{python}\n# 열 선택1\ndf = pd.read_csv('./data/weather.csv', encoding='cp949')\ndf['평균기온']\n```\n\n```{python}\n# 열 선택2\ndf[['최저기온', '최고기온']]\n```\n\n<br>\n\n### 4.4.2. 레이블이나 조건 표현으로 선택\n+ 레이블(label)을 기반으로 행과 열을 선택할 때 `loc[]` 속성을 사용함\n  + 열 이름을 이용하여 특정 열을 선택할 수 있음\n  + 인덱스 이름을 이용하여 특정 행을 선택할 수 있음\n  + 조건식을 사용하여 특정 조건을 만족하는 행을 선택할 수 있음\n    + 조건이 2개 이상인 경우, 각 조건을 `()`로 묶고 논리 연산자(`&`, `|`, `~`)를 사용함\n\n<br>\n\n```{python}\n# 열 선택3\ndf.loc[:, ['날짜', '최고기온']]\n```\n\n```{python}\n# 행 선택1\ndf.loc[0:3,]\n```\n\n```{python}\n# 행 선택2 : 날짜 데이터를 인덱스로 지정 후, 특정 날짜에 해당하는 행 선택\ndf.index = df['날짜']\ndf.loc['2022-06-05']\n```\n\n```{python}\n# 헹 선택3 : 조건을 만족하는 행 선택\ndf.loc[df['평균기온']>=25]\n```\n\n<br>\n\n### 4.4.3. 불 인덱싱\n+ 조건식을 사용하면 각 행이 조건을 만족하는지 여부를 `True` 또는 `False`로 반환함\n+ 그 결과인 부울(boolean)형 시리즈를 `[]`에 전달하면 `True`에 해당하는 행만 선택할 수 있음\n+ 조건이 2개 이상인 경우, 각 조건을 `()`로 묶고 논리 연산자(`&`, `|`, `~`)를 사용함\n\n<br>\n\n```{python}\n# 불 인덱싱1 : 조건을 만족하는 행 선택\nw = df['최고기온']>=30\ndf[w]\n```\n\n```{python}\n# 불 인덱싱2 : 조건을 만족하는 행과 특정 열 선택\nw = df['최고기온']>=30\ndf[w][['최저기온', '최고기온']]\n```\n\n```{python}\n# 불 인덱싱3 : 제일 더웠던 날 선택\nw = df['최고기온']==df['최고기온'].max()\ndf[w]\n```\n\n```{python}\n# [Note] 특정 조건을 만족하는 데이터 선택\ndf.query('최고기온-최저기온>=10')\n```\n\n<br>\n\n## 4.5. 데이터 가공 및 그룹핑\n### 4.5.1. 데이터 가공\n+ `drop()` 메소드를 이용하여 특정 행 또는 열을 삭제할 수 있음\n  + 행 삭제(axis=0) : index 인자에 삭제할 행에 대한 인덱스를 지정함\n    + 특정 조건을 만족하는 행의 위치에 대한 인덱스를 추출하려면 `index` 속성을 이용함\n  + 열 삭제(axis=1) : columns 인자에 삭제할 열 이름을 리스트 형태로 지정함\n  + 원본 데이터를 직접 수정하려면 `inplace=True` 옵션을 지정함\n\n<br>\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 206}\n# 데이터 불러오기\ndf = pd.read_csv(\"./data/music.csv\")\ndf\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 206}\n# 여러 개의 열 삭제\ndf.drop(columns = ['sortation', 'agency'], inplace=True)\ndf.columns\n```\n\n```{python}\n# 열 이름 변경\ndf.columns = ['제목', '이름', '인원수', '발매일', '장르', '유형']\ndf.head()\n```\n\n```{python}\n# 발매일 변수를 datetime 형식으로 변환\ndf['발매일'] = pd.to_datetime(df['발매일'])\ndf.dtypes\n```\n\n```{python}\n# 새로운 열 생성\ndf['년도'] = df['발매일'].dt.year\ndf['월'] = df['발매일'].dt.month\ndf['일'] = df['발매일'].dt.day\ndf.head()\n```\n\n<br>\n\n### 4.5.2. 데이터 그룹핑\n+ `groupby()` 메소드를 이용하여 특정 열을 기준으로 데이터를 그룹화할 수 있음\n+ 통계량을 산출하는 메소드 `mean()`, `std()`, `var()`, `max()`, `min()`, `mode()` 등과 함께 사용됨\n\n<br>\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 347}\n# 데이터 그룹핑1\nnewdata = df.groupby(['장르']).count()                            # df.value_counts('장르')\npd.DataFrame(newdata['제목'])\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 253}\n# 데이터 그룹핑2\nnewdata = df.groupby(['장르'])['인원수'].mean()\npd.DataFrame(newdata)\n```\n\n<br>\n\n## 4.6. 결측 데이터 처리\n+ 결측 데이터(missing value)\n  + Pandas는 누락된 데이터를 `NaN`(Not a Number)로 표기하며, 연산 시 자동으로 제외됨\n  + `isna()`, `isnull()` 메소드를 이용하면 결측값을 확인할 수 있음\n\n<br>\n\n+ 결측 데이터 처리\n  + 가장 간단한 방법은 `dropna()` 메소드를 이용하여 결측값이 포함된 행이나 열을 삭제하는 것임\n    + `axis=0`이면 행, `axis=1`이면 열을 삭제함\n  + `fillna()` 메소드를 이용하여 결측값을 최빈값이나 평균으로 대체할 수도 있음\n\n<br>\n\n```{python}\n# 데이터 불러오기\ndf = pd.read_csv(\"./data/train.csv\")\ndf\n```\n\n```{python}\n# 결측값 확인\ndf[df['Embarked'].isna()]\n```\n\n```{python}\n# 각 열별 결측값 개수 확인\ndf.isnull().sum()\n```\n\n```{python}\n# 결측값이 포함된 열 삭제\ndf.drop('Cabin', axis=1, inplace=True)\ndf.columns\n```\n\n```{python}\n# 결측값이 포함된 행 삭제\ndf.dropna(axis=0)\n```\n\n```{python}\n# 결측값을 최빈값으로 대체\nembarked_mode = df['Embarked'].mode()[0]\ndf['Embarked'] = df['Embarked'].fillna(embarked_mode)\ndf.isnull().sum()\n```\n\n```{python}\n# 결측값을 평균으로 대체\nage_mean = df['Age'].mean()\ndf['Age'] = df['Age'].fillna(age_mean)\ndf.isnull().sum()\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"toc-depth":2,"output-file":"2_2_pandas.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","theme":["cerulean"],"jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}