{"title":"8.1. 상관분석","markdown":{"yaml":{"jupyter":"python3"},"headingText":"8.1. 상관분석","containsRefs":false,"markdown":"\n\n<h1>8. 지도학습 : 회귀</h1>\n\n### 8.1.1. 상관계수\n+ 상관분석(correlation analysis)\n  + 두 수치형 변수 간 선형적인 관계(linear relationship)를 파악하는 통계 기법\n  + 상관계수(correlation coefficient)\n    + 두 변수 간 상관관계를 수치로 나타내어 정량화한 지표\n    + 상관계수의 절대값은 선형성의 강도를, 부호는 선형성의 방향성을 나타냄\n    + 변수의 측정 단위의 영향을 받지 않음\n\n<br>\n\n+ 상관계수의 성질\n  + 상관계수 r은 항상 -1에서 +1 사이의 값을 가짐\n  + 절대값이 1에 가까울수록 강한 상관관계를 의미함\n  + r>0이면 양의 상관관계, r<0이면 음의 상관관계, r=0이면 상관관계가 없음을 나타냄\n    + 양의 상관관계 : 한 변수가 증가할 때 다른 변수도 증가\n    + 음의 상관관계 : 한 변수가 증가할 때 다른 변수는 감소\n    + 상관관계 없음 : 한 변수가 증가할 때 다른 변수는 영향을 받지 않음\n\n<br>\n\n![](./images/fig3-6.jpg){width=70%}\n\n<br>\n\n### 8.1.2. (실습) 행복지수 데이터 분석\n+ \\[데이터\\] 캐글에서 제공하는 전세계 행복지수 데이터\n  + 평가지표 : 1인당 GDP, 사회적 지지 정도, 건강한 기대수명, 인생 선택의 자유, 기부\n  + \\[실습파일\\] [2020.csv](./data/2020.csv), [2021.csv](./data/2021.csv)\n\n<br>\n\n> **행복지수와 관련된 요인은 무엇일까?**\n\n<br>\n\n```{python}\n## (1) 데이터 확인 및 전처리\n```\n\n```{python}\n# 라이브러리 불러오기\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n```\n\n```{python}\n# 데이터 불러오기\ndf2020 = pd.read_csv('./data/2020.csv', index_col=0)\ndf2021 = pd.read_csv('./data/2021.csv', index_col=0)\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n# 열 정보\ndf2020.dtypes\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 238}\n# 2020년 데이터 확인\ndf2020.head()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 238}\n# 2021년 데이터 확인\ndf2021.head()\n```\n\n```{python}\n# 데이터 전처리 : 열 삭제\ndf2020.drop(['upperwhisker', 'lowerwhisker', 'Dystopia'], axis=1, inplace=True)\ndf2021.drop(['upperwhisker', 'lowerwhisker', 'Dystopia'], axis=1, inplace=True)\n```\n\n```{python}\n# 열 이름 변경 : 공백을 .으로 대체\n#df2020.columns = df2020.columns.str.replace(' ','.')\n#df2021.columns = df2021.columns.str.replace(' ','.')\n```\n\n```{python}\n# 열 이름 변경\ndf2020.columns = ['Country', 'Score', 'GDP.per.capita', 'Social.support', 'Life.expectancy', 'Freedom', 'Generosity']\ndf2021.columns = ['Country', 'Score', 'GDP.per.capita', 'Social.support', 'Life.expectancy', 'Freedom', 'Generosity']\n```\n\n<br>\n\n```{python}\n## (2) 데이터 분석 및 시각화\n## (2-1) 행복 점수와 기능의 상관관계\n##       한 국가의 행복지수와 경제적(GDP), 법적 상태(Freedom)는 상관관계가 있는가?\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 455}\n# 데이터 전처리\ndf1 = df2020.copy()\ndf1.drop(['Social.support', 'Life.expectancy', 'Generosity'], axis=1, inplace=True)\ndf1.head()\n```\n\n```{python}\ndf1.dtypes\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n# 상관관계 : 2020년 데이터\n# 행복지수와 GDP 간 상관계수는 0.78로, 강한 양의 상관관계임\n# 헹복지수와 Freedom 간 상관계수는 0.59로, 뚜렷한 양의 상관관계임\ncorr = df1.select_dtypes(include='number').corr()\ncorr['Score'].sort_values(ascending=False)\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 396}\n# 히트맵 : 2020년 데이터\nplt.figure(figsize=(6, 4))\nsns.heatmap(corr, annot=True, cmap='Blues')\nplt.show()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 455}\n# 데이터 전처리\ndf2 = df2021.copy()\ndf2.drop(['Social.support', 'Life.expectancy', 'Generosity'], axis=1, inplace=True)\ndf2.head()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 396}\n# 히트맵 : 2021년 데이터\n# 행복지수와 GDP 간 상관계수는 0.79로, 강한 양의 상관관계임\n# 헹복지수와 Freedom 간 상관계수는 0.61로, 뚜렷한 양의 상관관계임\nplt.figure(figsize=(6, 4))\nsns.heatmap(df2.select_dtypes(include='number').corr(), annot=True, cmap='PuBuGn')\nplt.show()\n```\n\n<br>\n\n+ 행복지수와 GDP 간 관계는?\n  + 상관계수는 2020년 0.78, 2021년 0.79로, 강한 양의 상관관계로 나타남\n  + 경제 성장은 보통 더 높은 소득과 향상된 생활 수준으로 이어지므로, 국민의 행복 수준도 높아지는 경향이 있음\n  + 따라서 국민의 행복을 보장하기 위해, 국가의 GDP는 주요 우선순위 중 하나로 고려될 필요가 있음\n\n<br>\n\n+ 행복지수와 인생 선택의 자유 간 관계는?\n  + 상관계수는 2020년 0.59, 2021년 0.61로, 뚜렷한 양의 상관관계로 나타남\n  + 자유에 대한 인식은 지역과 문화에 따라 다양하기 때문에 일반화하기는 어려움\n  + 그럼에도 불구하고, 개인이 삶을 선택할 자유를 얼마나 느끼는지는 국민의 행복 수준에 중요한 영향을 미침\n\n<br>\n\n```{python}\n## (2-2) 행복 점수와 사회적 상태의 상관관계\n##       한 국가의 행복지수와 사회적 상태(Social.support)는 상관관계가 있는가?\n```\n\n```{python}\n# 데이터 전처리\nx1 = df2020[['Generosity', 'Social.support', 'Score']].copy()\nx2 = df2021[['Generosity', 'Social.support', 'Score']].copy()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 396}\n# 히트맵 : 2020년 데이터\na1 = x1.corr()\nplt.figure(figsize=(6, 4))\nsns.heatmap(a1, annot=True)\nplt.show()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 396}\n# 히트맵 : 2021년 데이터\na2 = x2.corr()\nplt.figure(figsize=(6, 4))\nsns.heatmap(a2, annot=True, cmap='GnBu')\nplt.show()\n```\n\n<br>\n\n+ 행복지수와 사회적 지지 간 관계는?\n  + 상관계수는 2020년 0.77, 2021년 0.76으로, 강한 양의 상관관계로 나타남\n  + 사회적 지지는 가족, 친구, 지인 등과 함께하는 관계에서 느끼는 정서적 지원에 대한 인식을 의미함\n  + 일상 생활에서 가깝게 지내는 사람들과의 관계에서 형성되므로, 사회적 지지는 행복 수준에 중요햔 요소임을 알 수 있음\n\n<br>\n\n+ 행복지수와 기부 문화 간 관계는?\n  + 상관계수는 2020년 0.069, 2021년 -0.018로, 상관관계가 거의 없는 것으로 나타남\n  + 따라서 기부 문화가 행복 수준과 직접적인 관련이 거의 없음을 확인할 수 있음\n\n<br>\n\n```{python}\n## (2-3) 행복 점수와 전체 변수의 상관관계\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 580}\n# 전체 상관계수 : 2020년 데이터\ncorr = df2020.select_dtypes(include='number').corr()\n\nplt.figure(figsize=(8, 6))\nupp_mat = np.triu(corr)\nsns.heatmap(corr, mask=upp_mat,vmin=-1, vmax=1, annot=True, cmap ='RdYlBu_r', linewidths=4)\nplt.xticks(rotation=45)\nplt.show()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 580}\n# 전체 상관계수 : 2021년 데이터\n# 행복도에 가장 큰 영향을 주는 것은 경제적 여유, 사회적 지지, 기대수명(건간), 자유도 순인 것을 알 수 있었다.\ncorr = df2021.select_dtypes(include='number').corr()\n\nplt.figure(figsize=(8, 6))\nupp_mat = np.triu(corr)\nsns.heatmap(corr, mask=upp_mat, vmin=-1, vmax=1,annot = True, cmap ='PiYG', linewidths=4)\nplt.xticks(rotation=45)\nplt.show()\n```\n\n<br>\n\n<br>\n\n## 8.2. 회귀분석\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n# 한글 깨짐 현상에 대한 해결 방법\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n\nplt.rc('font', family='Malgun Gothic')  # 또는 '맑은 고딕'\nmpl.rcParams['axes.unicode_minus'] = False\n```\n\n```{python}\n# scikit-learn 설치하기\n#!pip install scikit-learn\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 284}\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n# 공부시간 : 독립변수, 시험점수 : 종속변수\nx = [[2],[4],[6],[8],[10]]       # 공부시간\ny = [[81],[93],[90],[97],[100]]  # 시험점수\n\n# 산점도 그래프\nplt.scatter(x,y)\nplt.show()\n\n# 학습시키기\nmodel = LinearRegression()      # 선형회귀분석 객체 생성하기\n\n# 선형회귀분석 객체를 이용하여 학습시키기\nmodel.fit(x,y)\n\n# 예측하기\nresult = model.predict([[7]])   # 7시간 학습\nprint(f'예상점수:{result}')\n```\n\n<br>\n\n### 8.2.1. 단순선형 회귀분석\n\n<br>\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 206}\n# 데이터 불러오기\nseoul = pd.read_csv('./data/(2010-2020) weather.csv', encoding='cp949')\nseoul.head()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\nseoul.info()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 300}\nseoul.describe()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 206}\n# 지점 변수 삭제\nseoul.drop('지점', axis=1, inplace=True)\nseoul.head()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 206}\nseoul.head()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n# 열 이름 변경\nseoul.columns = ['날짜', '평균기온', '최저기온', '최고기온']\nseoul.columns\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\nseoul.isnull().sum()\n```\n\n```{python}\n# 결측값을 포함하는 행 삭제\nseoul.dropna(subset=['최고기온'], axis=0, inplace=True)\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\nseoul.info()\n```\n\n```{python}\nseoul['날짜'] = pd.to_datetime(seoul['날짜'])\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 206}\n# 열 추가\nseoul['연도'] = seoul['날짜'].dt.year\nseoul['월']=seoul['날짜'].dt.month\nseoul['일']=seoul['날짜'].dt.day\nseoul.head()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 394}\n# 필터링\nconditions = (seoul['날짜'].dt.month==8) & (seoul['날짜'].dt.day==15)\nseoul0815 = seoul[conditions]\nseoul0815\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\nseoul0815.info()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n# 결측값 확인\nseoul0815.isnull().sum()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 444}\n# 연도에 따른 평균기온 변화\nfig = plt.figure(figsize=(5, 3))\nX = seoul0815[['연도']]\nY = seoul0815['평균기온']\nplt.xlabel('연도')\nplt.ylabel('평균기온')\nplt.scatter(X, Y)\nplt.show()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 869}\n# jointplot 그리기\nsns.jointplot(x='연도', y ='평균기온', kind='reg', data=seoul0815)\nplt.show()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n# 단순선형 회귀분석 : 2022년 8월 15일 기온 예측\nmodel = LinearRegression()\nX = seoul0815[['연도']]\nY = seoul0815['평균기온']\nmodel.fit(X, Y)\n\nfuture = pd.DataFrame({'연도': [2022]})\nresult = model.predict(future)\nprint(result)   \n```\n\n<br>\n\n+ fit() 메서드는 선형 회귀 모델에 필요한 두 가지 변수를 전달\n  + 기울기: line_fitter.coef_\n  + 절편: line_fitter.intercept_\n  + 이렇게 하면 새로운 X 값을 넣어 y값을 예측할 수 있게 됨\n  + 싸이킷런 단순 선형회귀에서는 최소제곱법(Ordinary Least Squares)을 활용하기 때문\n\n<br>\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\nseoul0815.info()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 444}\n# 8월 15일 평균기온을 산점도, 회귀선 출력하기\nx=seoul0815['연도']\ny=seoul0815['평균기온']\n\nfp1 = np.polyfit(x, y,2)\nf1 = np.poly1d(fp1)\nfx = np.linspace(2010, 2020)\n\nplt.figure(figsize=(5, 3))\nplt.scatter(x,y)\nplt.plot(fx, f1(fx), ls='dashed', lw=3, color='g')\n\nplt.xlabel('연도')\nplt.ylabel('평균기온')\nplt.show()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\nfp1\nf1\nfx\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 444}\n# 시본 모듈로 추세선 넣기\nfig = plt.figure(figsize=(5, 3))   \nsns.regplot(x='연도', y='평균기온', data=seoul0815) \nplt.grid()\nplt.show()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 461}\nsns.jointplot(x='연도', y='평균기온', data=seoul0815, kind='reg')\nplt.show()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 728}\nsns.pairplot(seoul0815, kind='reg')\nplt.show()\n```\n\n<br>\n\n### 8.2.2. 다중선형 회귀분석\n\n<br>\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 426}\nseoul.info()\nseoul.head()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\n\nX = seoul0815[['연도','최저기온','최고기온']]\nY = seoul0815['평균기온']\n\nmodel.fit(X, Y)\nnew_data = pd.DataFrame({'연도': [2022], '최저기온': [24], '최고기온': [33]})\nresult = model.predict(new_data)\nprint(result)\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 502}\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nplt.figure(figsize=(10,3))\n\n# 데이터 준비 : 속성(변수) 2가지 선택\nX = seoul[['연도','최저기온','최고기온']]\nY = seoul['평균기온']\n\n# 먼저 X와 Y변수를 받아 사이킷런의 train_test_split함수를 통해 7:3의 비율로 데이터를 분할한다.\nx_train, x_test, y_train, y_test = train_test_split(X,Y, train_size = 0.7, test_size = 0.3)\n\n#다중 선형 회귀 모델 생성\nmodel = LinearRegression()\nmodel.fit(x_train, y_train)\n\n# 모델 테스트하기 : test셋의 일부 데이터를 가지고 모델의 예측결과가 얼마나 좋게 나타나는지 확인\nplt.plot(model.predict(x_test[:50]), label='predict')\nplt.plot(y_test[:50].values.reshape(-1, 1), label='real temp')\nplt.legend()\nplt.show()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 502}\n# 전체 데이터를 이용해 값을 예측하고 실제 값과 비교하여 산점도 그리기\nplt.figure(figsize=(10, 3))\ny_predict = model.predict(x_test)\nplt.scatter(y_test, y_predict, alpha = 0.4)\nplt.show()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n# score 메소드를 통해 다중선형회귀 모델의 성능을 측정\nprint(model.score(x_train,y_train))\n# 결정계수 R²의 최댓값은 1이며 이 수치가 클수록 실제값과 예측값이 유사함을 의미한다.\n# 우리가 모델링한 다중선형회귀모델은 약 0.99의 결정계수를 가지며 \n# 이는 X변수들이 y변수에 미치는 영향이 99%로 X변수들이 평균기온값 변동의 99%를 설명할 수 있다는 뜻임\n```\n\n","srcMarkdownNoYaml":"\n\n<h1>8. 지도학습 : 회귀</h1>\n\n## 8.1. 상관분석\n### 8.1.1. 상관계수\n+ 상관분석(correlation analysis)\n  + 두 수치형 변수 간 선형적인 관계(linear relationship)를 파악하는 통계 기법\n  + 상관계수(correlation coefficient)\n    + 두 변수 간 상관관계를 수치로 나타내어 정량화한 지표\n    + 상관계수의 절대값은 선형성의 강도를, 부호는 선형성의 방향성을 나타냄\n    + 변수의 측정 단위의 영향을 받지 않음\n\n<br>\n\n+ 상관계수의 성질\n  + 상관계수 r은 항상 -1에서 +1 사이의 값을 가짐\n  + 절대값이 1에 가까울수록 강한 상관관계를 의미함\n  + r>0이면 양의 상관관계, r<0이면 음의 상관관계, r=0이면 상관관계가 없음을 나타냄\n    + 양의 상관관계 : 한 변수가 증가할 때 다른 변수도 증가\n    + 음의 상관관계 : 한 변수가 증가할 때 다른 변수는 감소\n    + 상관관계 없음 : 한 변수가 증가할 때 다른 변수는 영향을 받지 않음\n\n<br>\n\n![](./images/fig3-6.jpg){width=70%}\n\n<br>\n\n### 8.1.2. (실습) 행복지수 데이터 분석\n+ \\[데이터\\] 캐글에서 제공하는 전세계 행복지수 데이터\n  + 평가지표 : 1인당 GDP, 사회적 지지 정도, 건강한 기대수명, 인생 선택의 자유, 기부\n  + \\[실습파일\\] [2020.csv](./data/2020.csv), [2021.csv](./data/2021.csv)\n\n<br>\n\n> **행복지수와 관련된 요인은 무엇일까?**\n\n<br>\n\n```{python}\n## (1) 데이터 확인 및 전처리\n```\n\n```{python}\n# 라이브러리 불러오기\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n```\n\n```{python}\n# 데이터 불러오기\ndf2020 = pd.read_csv('./data/2020.csv', index_col=0)\ndf2021 = pd.read_csv('./data/2021.csv', index_col=0)\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n# 열 정보\ndf2020.dtypes\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 238}\n# 2020년 데이터 확인\ndf2020.head()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 238}\n# 2021년 데이터 확인\ndf2021.head()\n```\n\n```{python}\n# 데이터 전처리 : 열 삭제\ndf2020.drop(['upperwhisker', 'lowerwhisker', 'Dystopia'], axis=1, inplace=True)\ndf2021.drop(['upperwhisker', 'lowerwhisker', 'Dystopia'], axis=1, inplace=True)\n```\n\n```{python}\n# 열 이름 변경 : 공백을 .으로 대체\n#df2020.columns = df2020.columns.str.replace(' ','.')\n#df2021.columns = df2021.columns.str.replace(' ','.')\n```\n\n```{python}\n# 열 이름 변경\ndf2020.columns = ['Country', 'Score', 'GDP.per.capita', 'Social.support', 'Life.expectancy', 'Freedom', 'Generosity']\ndf2021.columns = ['Country', 'Score', 'GDP.per.capita', 'Social.support', 'Life.expectancy', 'Freedom', 'Generosity']\n```\n\n<br>\n\n```{python}\n## (2) 데이터 분석 및 시각화\n## (2-1) 행복 점수와 기능의 상관관계\n##       한 국가의 행복지수와 경제적(GDP), 법적 상태(Freedom)는 상관관계가 있는가?\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 455}\n# 데이터 전처리\ndf1 = df2020.copy()\ndf1.drop(['Social.support', 'Life.expectancy', 'Generosity'], axis=1, inplace=True)\ndf1.head()\n```\n\n```{python}\ndf1.dtypes\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n# 상관관계 : 2020년 데이터\n# 행복지수와 GDP 간 상관계수는 0.78로, 강한 양의 상관관계임\n# 헹복지수와 Freedom 간 상관계수는 0.59로, 뚜렷한 양의 상관관계임\ncorr = df1.select_dtypes(include='number').corr()\ncorr['Score'].sort_values(ascending=False)\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 396}\n# 히트맵 : 2020년 데이터\nplt.figure(figsize=(6, 4))\nsns.heatmap(corr, annot=True, cmap='Blues')\nplt.show()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 455}\n# 데이터 전처리\ndf2 = df2021.copy()\ndf2.drop(['Social.support', 'Life.expectancy', 'Generosity'], axis=1, inplace=True)\ndf2.head()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 396}\n# 히트맵 : 2021년 데이터\n# 행복지수와 GDP 간 상관계수는 0.79로, 강한 양의 상관관계임\n# 헹복지수와 Freedom 간 상관계수는 0.61로, 뚜렷한 양의 상관관계임\nplt.figure(figsize=(6, 4))\nsns.heatmap(df2.select_dtypes(include='number').corr(), annot=True, cmap='PuBuGn')\nplt.show()\n```\n\n<br>\n\n+ 행복지수와 GDP 간 관계는?\n  + 상관계수는 2020년 0.78, 2021년 0.79로, 강한 양의 상관관계로 나타남\n  + 경제 성장은 보통 더 높은 소득과 향상된 생활 수준으로 이어지므로, 국민의 행복 수준도 높아지는 경향이 있음\n  + 따라서 국민의 행복을 보장하기 위해, 국가의 GDP는 주요 우선순위 중 하나로 고려될 필요가 있음\n\n<br>\n\n+ 행복지수와 인생 선택의 자유 간 관계는?\n  + 상관계수는 2020년 0.59, 2021년 0.61로, 뚜렷한 양의 상관관계로 나타남\n  + 자유에 대한 인식은 지역과 문화에 따라 다양하기 때문에 일반화하기는 어려움\n  + 그럼에도 불구하고, 개인이 삶을 선택할 자유를 얼마나 느끼는지는 국민의 행복 수준에 중요한 영향을 미침\n\n<br>\n\n```{python}\n## (2-2) 행복 점수와 사회적 상태의 상관관계\n##       한 국가의 행복지수와 사회적 상태(Social.support)는 상관관계가 있는가?\n```\n\n```{python}\n# 데이터 전처리\nx1 = df2020[['Generosity', 'Social.support', 'Score']].copy()\nx2 = df2021[['Generosity', 'Social.support', 'Score']].copy()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 396}\n# 히트맵 : 2020년 데이터\na1 = x1.corr()\nplt.figure(figsize=(6, 4))\nsns.heatmap(a1, annot=True)\nplt.show()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 396}\n# 히트맵 : 2021년 데이터\na2 = x2.corr()\nplt.figure(figsize=(6, 4))\nsns.heatmap(a2, annot=True, cmap='GnBu')\nplt.show()\n```\n\n<br>\n\n+ 행복지수와 사회적 지지 간 관계는?\n  + 상관계수는 2020년 0.77, 2021년 0.76으로, 강한 양의 상관관계로 나타남\n  + 사회적 지지는 가족, 친구, 지인 등과 함께하는 관계에서 느끼는 정서적 지원에 대한 인식을 의미함\n  + 일상 생활에서 가깝게 지내는 사람들과의 관계에서 형성되므로, 사회적 지지는 행복 수준에 중요햔 요소임을 알 수 있음\n\n<br>\n\n+ 행복지수와 기부 문화 간 관계는?\n  + 상관계수는 2020년 0.069, 2021년 -0.018로, 상관관계가 거의 없는 것으로 나타남\n  + 따라서 기부 문화가 행복 수준과 직접적인 관련이 거의 없음을 확인할 수 있음\n\n<br>\n\n```{python}\n## (2-3) 행복 점수와 전체 변수의 상관관계\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 580}\n# 전체 상관계수 : 2020년 데이터\ncorr = df2020.select_dtypes(include='number').corr()\n\nplt.figure(figsize=(8, 6))\nupp_mat = np.triu(corr)\nsns.heatmap(corr, mask=upp_mat,vmin=-1, vmax=1, annot=True, cmap ='RdYlBu_r', linewidths=4)\nplt.xticks(rotation=45)\nplt.show()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 580}\n# 전체 상관계수 : 2021년 데이터\n# 행복도에 가장 큰 영향을 주는 것은 경제적 여유, 사회적 지지, 기대수명(건간), 자유도 순인 것을 알 수 있었다.\ncorr = df2021.select_dtypes(include='number').corr()\n\nplt.figure(figsize=(8, 6))\nupp_mat = np.triu(corr)\nsns.heatmap(corr, mask=upp_mat, vmin=-1, vmax=1,annot = True, cmap ='PiYG', linewidths=4)\nplt.xticks(rotation=45)\nplt.show()\n```\n\n<br>\n\n<br>\n\n## 8.2. 회귀분석\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n# 한글 깨짐 현상에 대한 해결 방법\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n\nplt.rc('font', family='Malgun Gothic')  # 또는 '맑은 고딕'\nmpl.rcParams['axes.unicode_minus'] = False\n```\n\n```{python}\n# scikit-learn 설치하기\n#!pip install scikit-learn\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 284}\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n# 공부시간 : 독립변수, 시험점수 : 종속변수\nx = [[2],[4],[6],[8],[10]]       # 공부시간\ny = [[81],[93],[90],[97],[100]]  # 시험점수\n\n# 산점도 그래프\nplt.scatter(x,y)\nplt.show()\n\n# 학습시키기\nmodel = LinearRegression()      # 선형회귀분석 객체 생성하기\n\n# 선형회귀분석 객체를 이용하여 학습시키기\nmodel.fit(x,y)\n\n# 예측하기\nresult = model.predict([[7]])   # 7시간 학습\nprint(f'예상점수:{result}')\n```\n\n<br>\n\n### 8.2.1. 단순선형 회귀분석\n\n<br>\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 206}\n# 데이터 불러오기\nseoul = pd.read_csv('./data/(2010-2020) weather.csv', encoding='cp949')\nseoul.head()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\nseoul.info()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 300}\nseoul.describe()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 206}\n# 지점 변수 삭제\nseoul.drop('지점', axis=1, inplace=True)\nseoul.head()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 206}\nseoul.head()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n# 열 이름 변경\nseoul.columns = ['날짜', '평균기온', '최저기온', '최고기온']\nseoul.columns\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\nseoul.isnull().sum()\n```\n\n```{python}\n# 결측값을 포함하는 행 삭제\nseoul.dropna(subset=['최고기온'], axis=0, inplace=True)\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\nseoul.info()\n```\n\n```{python}\nseoul['날짜'] = pd.to_datetime(seoul['날짜'])\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 206}\n# 열 추가\nseoul['연도'] = seoul['날짜'].dt.year\nseoul['월']=seoul['날짜'].dt.month\nseoul['일']=seoul['날짜'].dt.day\nseoul.head()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 394}\n# 필터링\nconditions = (seoul['날짜'].dt.month==8) & (seoul['날짜'].dt.day==15)\nseoul0815 = seoul[conditions]\nseoul0815\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\nseoul0815.info()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n# 결측값 확인\nseoul0815.isnull().sum()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 444}\n# 연도에 따른 평균기온 변화\nfig = plt.figure(figsize=(5, 3))\nX = seoul0815[['연도']]\nY = seoul0815['평균기온']\nplt.xlabel('연도')\nplt.ylabel('평균기온')\nplt.scatter(X, Y)\nplt.show()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 869}\n# jointplot 그리기\nsns.jointplot(x='연도', y ='평균기온', kind='reg', data=seoul0815)\nplt.show()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n# 단순선형 회귀분석 : 2022년 8월 15일 기온 예측\nmodel = LinearRegression()\nX = seoul0815[['연도']]\nY = seoul0815['평균기온']\nmodel.fit(X, Y)\n\nfuture = pd.DataFrame({'연도': [2022]})\nresult = model.predict(future)\nprint(result)   \n```\n\n<br>\n\n+ fit() 메서드는 선형 회귀 모델에 필요한 두 가지 변수를 전달\n  + 기울기: line_fitter.coef_\n  + 절편: line_fitter.intercept_\n  + 이렇게 하면 새로운 X 값을 넣어 y값을 예측할 수 있게 됨\n  + 싸이킷런 단순 선형회귀에서는 최소제곱법(Ordinary Least Squares)을 활용하기 때문\n\n<br>\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\nseoul0815.info()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 444}\n# 8월 15일 평균기온을 산점도, 회귀선 출력하기\nx=seoul0815['연도']\ny=seoul0815['평균기온']\n\nfp1 = np.polyfit(x, y,2)\nf1 = np.poly1d(fp1)\nfx = np.linspace(2010, 2020)\n\nplt.figure(figsize=(5, 3))\nplt.scatter(x,y)\nplt.plot(fx, f1(fx), ls='dashed', lw=3, color='g')\n\nplt.xlabel('연도')\nplt.ylabel('평균기온')\nplt.show()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\nfp1\nf1\nfx\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 444}\n# 시본 모듈로 추세선 넣기\nfig = plt.figure(figsize=(5, 3))   \nsns.regplot(x='연도', y='평균기온', data=seoul0815) \nplt.grid()\nplt.show()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 461}\nsns.jointplot(x='연도', y='평균기온', data=seoul0815, kind='reg')\nplt.show()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 728}\nsns.pairplot(seoul0815, kind='reg')\nplt.show()\n```\n\n<br>\n\n### 8.2.2. 다중선형 회귀분석\n\n<br>\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 426}\nseoul.info()\nseoul.head()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\n\nX = seoul0815[['연도','최저기온','최고기온']]\nY = seoul0815['평균기온']\n\nmodel.fit(X, Y)\nnew_data = pd.DataFrame({'연도': [2022], '최저기온': [24], '최고기온': [33]})\nresult = model.predict(new_data)\nprint(result)\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 502}\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nplt.figure(figsize=(10,3))\n\n# 데이터 준비 : 속성(변수) 2가지 선택\nX = seoul[['연도','최저기온','최고기온']]\nY = seoul['평균기온']\n\n# 먼저 X와 Y변수를 받아 사이킷런의 train_test_split함수를 통해 7:3의 비율로 데이터를 분할한다.\nx_train, x_test, y_train, y_test = train_test_split(X,Y, train_size = 0.7, test_size = 0.3)\n\n#다중 선형 회귀 모델 생성\nmodel = LinearRegression()\nmodel.fit(x_train, y_train)\n\n# 모델 테스트하기 : test셋의 일부 데이터를 가지고 모델의 예측결과가 얼마나 좋게 나타나는지 확인\nplt.plot(model.predict(x_test[:50]), label='predict')\nplt.plot(y_test[:50].values.reshape(-1, 1), label='real temp')\nplt.legend()\nplt.show()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/, height: 502}\n# 전체 데이터를 이용해 값을 예측하고 실제 값과 비교하여 산점도 그리기\nplt.figure(figsize=(10, 3))\ny_predict = model.predict(x_test)\nplt.scatter(y_test, y_predict, alpha = 0.4)\nplt.show()\n```\n\n```{python}\n#| colab: {base_uri: https://localhost:8080/}\n# score 메소드를 통해 다중선형회귀 모델의 성능을 측정\nprint(model.score(x_train,y_train))\n# 결정계수 R²의 최댓값은 1이며 이 수치가 클수록 실제값과 예측값이 유사함을 의미한다.\n# 우리가 모델링한 다중선형회귀모델은 약 0.99의 결정계수를 가지며 \n# 이는 X변수들이 y변수에 미치는 영향이 99%로 X변수들이 평균기온값 변동의 99%를 설명할 수 있다는 뜻임\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"toc-depth":2,"output-file":"3_2_regression.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","theme":["cerulean"],"jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}