{
  "hash": "6dccf97f125f3b666225a02863e7beaf",
  "result": {
    "engine": "jupyter",
    "markdown": "---\njupyter: python3\n---\n\n\n\n\n<h1>9. 분류</h1>\n\n## 9.1. K-최근접 이웃\n+ 분류(classification)\n  + 지도학습의 한 종류로, 라벨(label)이 있는 데이터를 기반으로 각 데이터가 속하는 집단(category) 간의 관계를 학습함\n  + 학습된 모델은 새로운 데이터가 어떤 집단에 속하는지 자동으로 판별할 수 있음\n  + 대표적인 알고리즘으로는 k-최근접 이웃(K-NN), 의사결정트리(decision tree), 나이브 베이즈(naive bayes), 서포트 벡터 머신(SVM) 등이 있음\n  + 활용 사례: 스팸 문자 분류, 수능 점수 기반 등급 판별, 의료 진단(암 유무 판별), 이미지 속 객체 인식(강아지와 고양이 분류)  \n\n<br>\n\n+ K-최근접 이웃(K-Nearest Neighbors)\n  + 입력된 데이터로부터 거리가 가까운 k개의 기존 데이터 레이블을 참조하여 가장 많이 속한 라벨로 입력된 데이터를 라벨링하는 방법\n  + 일반적으로 k의 개수는 동점 상황을 만들지 않기 위해 홀수로 지정함\n  + 거리 계산에는 보통 유클리디안 거리(Euclidean distance)를 사용함\n\n![](./images/fig3-7.jpg){width=50%}\n\n<br>\n\n+ k의 수\n  + K-NN 알고리즘은 탐색할 이웃의 개수(k)에 따라 분류가 달라질 수 있음\n    + k가 너무 크면, 데이터의 세세한 패턴을 반영하지 못해 과소적합(underfitting)이 발생함\n    + k가 너무 작으면, 개별 데이터에 민감하게 반응하여 과적합(overfitting)이 발생함\n  + 일반적으로 최적의 k 값은 교차검증(cross-validation)을 통해 테스트 오차(test error)를 최소홯는 값으로 결정함\n\n![](./images/fig3-8.jpg){width=70%}\n\n<br>\n\n::: {#65aacc52 .cell execution_count=1}\n``` {.python .cell-code}\n# 라이브러리 불러오기\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n```\n:::\n\n\n::: {#2d757ae0 .cell execution_count=2}\n``` {.python .cell-code}\n# 원두맛에 대한 데이터 생성\nfrom sklearn.neighbors import KNeighborsClassifier\nx = [4, 5, 10, 4, 3, 11, 14 , 8, 10, 12] \ny = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21]\nclasses = [0, 0, 1, 0, 0, 1, 1, 0, 1, 1]\n\nplt.style.use('default')\nplt.scatter(x, y, c=classes)\nplt.show()\ndata = list(zip(x, y))\nprint(data)\n```\n\n::: {.cell-output .cell-output-display}\n![](3_3_classification_files/figure-html/cell-3-output-1.png){width=543 height=413}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[(4, 21), (5, 19), (10, 24), (4, 17), (3, 16), (11, 25), (14, 24), (8, 22), (10, 21), (12, 21)]\n```\n:::\n:::\n\n\n::: {#a85b7f4b .cell execution_count=3}\n``` {.python .cell-code}\n# k=1\nknn = KNeighborsClassifier(n_neighbors=1)\nknn.fit(data, classes)\nnew_x = 8\nnew_y = 21\nnew_point = [(new_x, new_y)]\nprediction = knn.predict(new_point)\nprint(prediction)\nplt.scatter(x + [new_x], y + [new_y], c=classes + [prediction[0]])\nplt.text(x=new_x-1.7, y=new_y-0.7, s=f\"new point, class: {prediction[0]}\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0]\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](3_3_classification_files/figure-html/cell-4-output-2.png){width=543 height=413}\n:::\n:::\n\n\n::: {#56b48f62 .cell execution_count=4}\n``` {.python .cell-code}\n# k=5\nknn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(data, classes)\nprediction = knn.predict(new_point)\nprint(prediction)\nplt.scatter(x + [new_x], y + [new_y], c=classes + [prediction[0]])\nplt.text(x=new_x-1.7, y=new_y-0.7, s=f\"new point, class: {prediction[0]}\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](3_3_classification_files/figure-html/cell-5-output-2.png){width=543 height=413}\n:::\n:::\n\n\n::: {#4367ee13 .cell execution_count=5}\n``` {.python .cell-code}\n# 교차검증으로 k찾기\nfrom sklearn.model_selection import cross_val_score\n\nknn=KNeighborsClassifier()\nscores=cross_val_score(knn,data,classes,cv=3, scoring='accuracy')\n\nfor i in range(scores.size):\n    print(f\"{i+1}번째 정확도: {scores[i]}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1번째 정확도: 1.0\n2번째 정확도: 1.0\n3번째 정확도: 0.6666666666666666\n```\n:::\n:::\n\n\n::: {#6993e4cd .cell execution_count=6}\n``` {.python .cell-code}\n# 표준화 예제 데이터 생성\ndf = pd.DataFrame({'A' : np.arange(11), 'B' : np.arange(11) ** 2})\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>16</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>5</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>6</td>\n      <td>36</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>7</td>\n      <td>49</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>8</td>\n      <td>64</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>9</td>\n      <td>81</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>10</td>\n      <td>100</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#7e939a0a .cell execution_count=7}\n``` {.python .cell-code}\n# Standard Scaler\nfrom sklearn.preprocessing import StandardScaler\nstandardScaler = StandardScaler()\ndf_standardScaled = standardScaler.fit_transform(df)\npd.DataFrame(df_standardScaled, columns = ['A_std', 'B_std'])\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A_std</th>\n      <th>B_std</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>-1.581139</td>\n      <td>-1.066004</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>-1.264911</td>\n      <td>-1.035546</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>-0.948683</td>\n      <td>-0.944175</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>-0.632456</td>\n      <td>-0.791888</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>-0.316228</td>\n      <td>-0.578688</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0.000000</td>\n      <td>-0.304572</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>0.316228</td>\n      <td>0.030457</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0.632456</td>\n      <td>0.426401</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>0.948683</td>\n      <td>0.883260</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>1.264911</td>\n      <td>1.401033</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>1.581139</td>\n      <td>1.979721</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#f3bc4d89 .cell execution_count=8}\n``` {.python .cell-code}\n#MinMaxScaler\nfrom sklearn.preprocessing import MinMaxScaler\nminmaxScaler = MinMaxScaler()\n\ndf_minmaxScaled = minmaxScaler.fit_transform(df)\npd.DataFrame(df_minmaxScaled, columns = ['A_minmax', 'B_minmax'])\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A_minmax</th>\n      <th>B_minmax</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.0</td>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.1</td>\n      <td>0.01</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.2</td>\n      <td>0.04</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.3</td>\n      <td>0.09</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.4</td>\n      <td>0.16</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0.5</td>\n      <td>0.25</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>0.6</td>\n      <td>0.36</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0.7</td>\n      <td>0.49</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>0.8</td>\n      <td>0.64</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>0.9</td>\n      <td>0.81</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>1.0</td>\n      <td>1.00</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<br>\n\n## 9.2. (실습) 드라마 분류\n\n<br>\n\n::: {#87b74f8a .cell execution_count=9}\n``` {.python .cell-code}\n# 11.2 드라마분류하기\ndf = pd.read_csv('./data/chap11_movie_genre_final.csv')\ndf.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>original_title</th>\n      <th>target</th>\n      <th>vote_average</th>\n      <th>Action</th>\n      <th>Adventure</th>\n      <th>Fantasy</th>\n      <th>ScienceFiction</th>\n      <th>Crime</th>\n      <th>Drama</th>\n      <th>...</th>\n      <th>Mystery</th>\n      <th>History</th>\n      <th>War</th>\n      <th>Music</th>\n      <th>Documentary</th>\n      <th>Foreign</th>\n      <th>TVMovie</th>\n      <th>director</th>\n      <th>cast</th>\n      <th>keywords</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>19995</td>\n      <td>Avatar</td>\n      <td>7</td>\n      <td>7.2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>James Cameron</td>\n      <td>SamWorthington,SigourneyWeaver,StephenLang,Zoe...</td>\n      <td>['culture clash', 'future', 'space war', 'spac...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>285</td>\n      <td>Pirates of the Caribbean: At World's End</td>\n      <td>7</td>\n      <td>6.9</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Gore Verbinski</td>\n      <td>JohnnyDepp,KeiraKnightley,OrlandoBloom,Stellan...</td>\n      <td>['ocean', 'drug abuse', 'exotic island', 'east...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>206647</td>\n      <td>Spectre</td>\n      <td>6</td>\n      <td>6.3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Sam Mendes</td>\n      <td>ChristophWaltz,DanielCraig,LéaSeydoux,RalphFie...</td>\n      <td>['spy', 'based on novel', 'secret agent', 'seq...</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows × 27 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#650f7d71 .cell execution_count=10}\n``` {.python .cell-code}\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 4775 entries, 0 to 4774\nData columns (total 27 columns):\n #   Column          Non-Null Count  Dtype  \n---  ------          --------------  -----  \n 0   id              4775 non-null   int64  \n 1   original_title  4775 non-null   object \n 2   target          4775 non-null   int64  \n 3   vote_average    4775 non-null   float64\n 4   Action          4775 non-null   int64  \n 5   Adventure       4775 non-null   int64  \n 6   Fantasy         4775 non-null   int64  \n 7   ScienceFiction  4775 non-null   int64  \n 8   Crime           4775 non-null   int64  \n 9   Drama           4775 non-null   int64  \n 10  Thriller        4775 non-null   int64  \n 11  Animation       4775 non-null   int64  \n 12  Family          4775 non-null   int64  \n 13  Western         4775 non-null   int64  \n 14  Comedy          4775 non-null   int64  \n 15  Romance         4775 non-null   int64  \n 16  Horror          4775 non-null   int64  \n 17  Mystery         4775 non-null   int64  \n 18  History         4775 non-null   int64  \n 19  War             4775 non-null   int64  \n 20  Music           4775 non-null   int64  \n 21  Documentary     4775 non-null   int64  \n 22  Foreign         4775 non-null   int64  \n 23  TVMovie         4775 non-null   int64  \n 24  director        4745 non-null   object \n 25  cast            4732 non-null   object \n 26  keywords        4775 non-null   object \ndtypes: float64(1), int64(22), object(4)\nmemory usage: 1007.4+ KB\n```\n:::\n:::\n\n\n::: {#556f01d0 .cell execution_count=11}\n``` {.python .cell-code}\nplt.figure(figsize=(8, 3))\nsns.histplot(df['target'], bins=20, kde=True)\nplt.title(\"movie count\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](3_3_classification_files/figure-html/cell-12-output-1.png){width=704 height=315}\n:::\n:::\n\n\n::: {#f197ae3e .cell execution_count=12}\n``` {.python .cell-code}\nplt.figure(figsize=(8, 3))\nsns.histplot(df['vote_average'], bins=20, kde=True)\nplt.title(\"vote_average\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](3_3_classification_files/figure-html/cell-13-output-1.png){width=704 height=315}\n:::\n:::\n\n\n::: {#ef933eb1 .cell execution_count=13}\n``` {.python .cell-code}\nprint(df.columns)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIndex(['id', 'original_title', 'target', 'vote_average', 'Action', 'Adventure',\n       'Fantasy', 'ScienceFiction', 'Crime', 'Drama', 'Thriller', 'Animation',\n       'Family', 'Western', 'Comedy', 'Romance', 'Horror', 'Mystery',\n       'History', 'War', 'Music', 'Documentary', 'Foreign', 'TVMovie',\n       'director', 'cast', 'keywords'],\n      dtype='object')\n```\n:::\n:::\n\n\n::: {#87cf2e3b .cell execution_count=14}\n``` {.python .cell-code}\ncount_list=[]\ngenre_list=['Action', 'Adventure','Fantasy', 'ScienceFiction', 'Crime', 'Drama', 'Thriller', 'Animation','Family', 'Western', 'Comedy', 'Romance', 'Horror', 'Mystery','History', 'War', 'Music', 'Documentary', 'Foreign', 'TVMovie']\n\nfor i in genre_list:\n  count_list.append(len(df[df[i]==1]))\n\ncount_list\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n[1140,\n 786,\n 421,\n 535,\n 691,\n 2281,\n 1270,\n 232,\n 512,\n 81,\n 1714,\n 891,\n 518,\n 347,\n 191,\n 143,\n 184,\n 110,\n 33,\n 8]\n```\n:::\n:::\n\n\n::: {#b162fe48 .cell execution_count=15}\n``` {.python .cell-code}\nplt.figure(figsize=(5, 5))\nplt.barh(genre_list,count_list,color=sns.color_palette('hls',20))\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](3_3_classification_files/figure-html/cell-16-output-1.png){width=516 height=428}\n:::\n:::\n\n\n::: {#e5e4e6fe .cell execution_count=16}\n``` {.python .cell-code}\nfor i in range(len(genre_list)):\n  print(f'{genre_list[i]} : {count_list[i]}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAction : 1140\nAdventure : 786\nFantasy : 421\nScienceFiction : 535\nCrime : 691\nDrama : 2281\nThriller : 1270\nAnimation : 232\nFamily : 512\nWestern : 81\nComedy : 1714\nRomance : 891\nHorror : 518\nMystery : 347\nHistory : 191\nWar : 143\nMusic : 184\nDocumentary : 110\nForeign : 33\nTVMovie : 8\n```\n:::\n:::\n\n\n::: {#ca627a45 .cell execution_count=17}\n``` {.python .cell-code}\ntemp = (df.Drama==1)&(df.vote_average>=6.5)\ndf[temp]\nprint(f'드라마 장르 영화 2281편 중 평점 6.5 이상:{len(df[temp])}편')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n드라마 장르 영화 2281편 중 평점 6.5 이상:1208편\n```\n:::\n:::\n\n\n::: {#99db7575 .cell execution_count=18}\n``` {.python .cell-code}\ntemp = (df.Comedy==1)&(df.vote_average>=6.5)\ndf[temp]\nprint(f'코메디 장르 영화 1714편 중 평점 6.5 이상:{len(df[temp])}편')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n코메디 장르 영화 1714편 중 평점 6.5 이상:521편\n```\n:::\n:::\n\n\n::: {#0cd3b59d .cell execution_count=19}\n``` {.python .cell-code}\ntemp = (df.Thriller==1)&(df.vote_average>=6.5)\ndf[temp]\nprint(f'스릴러 영화 1270편 중 평점 6.5 이상:{len(df[temp])}편')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n스릴러 영화 1270편 중 평점 6.5 이상:415편\n```\n:::\n:::\n\n\n::: {#eb5b5665 .cell execution_count=20}\n``` {.python .cell-code}\ntemp = (df.Action==1)&(df.vote_average>=6.5)\ndf[temp]\nprint(f'액션 영화 1140편 중 평점 6.5 이상:{len(df[temp])}편')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n액션 영화 1140편 중 평점 6.5 이상:355편\n```\n:::\n:::\n\n\n::: {#00941d35 .cell execution_count=21}\n``` {.python .cell-code}\n1208/2218\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n0.5446348061316502\n```\n:::\n:::\n\n\n::: {#2a32356b .cell execution_count=22}\n``` {.python .cell-code}\n521/1714\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n0.3039673278879813\n```\n:::\n:::\n\n\n::: {#57f0f2a6 .cell execution_count=23}\n``` {.python .cell-code}\n415/1270\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n0.32677165354330706\n```\n:::\n:::\n\n\n::: {#3db90113 .cell execution_count=24}\n``` {.python .cell-code}\n355/1140\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n0.31140350877192985\n```\n:::\n:::\n\n\n::: {#e2425b55 .cell execution_count=25}\n``` {.python .cell-code}\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n```\n:::\n\n\n::: {#008a6ac7 .cell execution_count=26}\n``` {.python .cell-code}\nx=df[['Action', 'Adventure', 'Fantasy', 'ScienceFiction', 'Crime', 'Drama', 'Thriller', 'Animation', 'Family', 'Western', 'Comedy', 'Romance', 'Horror', 'Mystery', 'History', 'War', 'Music', 'Documentary', 'Foreign', 'TVMovie']]\ny=df[['target']]\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split( x, y, test_size=0.2)\nprint(x_train.shape)\nprint(x_test.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(3820, 20)\n(955, 20)\n```\n:::\n:::\n\n\n::: {#06c488ab .cell execution_count=27}\n``` {.python .cell-code}\nfrom sklearn.model_selection import cross_val_score\nknn = KNeighborsClassifier()\nscores=cross_val_score(knn, x_train, y_train, cv=2, scoring='accuracy')\n\nfor i in range(scores.size):\n    print(f\"{i+1}번째 정확도: {scores[i]}\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\USER\\anaconda3\\Lib\\site-packages\\sklearn\\model_selection\\_split.py:776: UserWarning:\n\nThe least populated class in y has only 1 members, which is less than n_splits=2.\n\nC:\\Users\\USER\\anaconda3\\Lib\\site-packages\\sklearn\\neighbors\\_classification.py:238: DataConversionWarning:\n\nA column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n\nC:\\Users\\USER\\anaconda3\\Lib\\site-packages\\sklearn\\neighbors\\_classification.py:238: DataConversionWarning:\n\nA column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n1번째 정확도: 0.3947643979057592\n2번째 정확도: 0.3481675392670157\n```\n:::\n:::\n\n\n::: {#fb89730d .cell execution_count=28}\n``` {.python .cell-code}\nfrom sklearn.neighbors import KNeighborsClassifier\n\nneigh=KNeighborsClassifier(n_neighbors=5)\nneigh.fit(x_train, y_train)\nprint(neigh.classes_)\nprint(f'거리계산방법: {neigh.effective_metric_}')\nprint(f'샘플수: {neigh.n_samples_fit_}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[ 0  1  2  3  4  5  6  7  8  9 10]\n거리계산방법: euclidean\n샘플수: 3820\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\USER\\anaconda3\\Lib\\site-packages\\sklearn\\neighbors\\_classification.py:238: DataConversionWarning:\n\nA column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n\n```\n:::\n:::\n\n\n::: {#a0e9f34b .cell execution_count=29}\n``` {.python .cell-code}\nprint(neigh.score(x_test,y_test))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.3769633507853403\n```\n:::\n:::\n\n\n::: {#22950337 .cell execution_count=30}\n``` {.python .cell-code}\nnew_x = [1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\nnew_df = pd.DataFrame([new_x], columns=x_train.columns)\nprediction = neigh.predict(new_df)\nprediction\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\narray([8], dtype=int64)\n```\n:::\n:::\n\n\n::: {#c08615a4 .cell execution_count=31}\n``` {.python .cell-code}\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import datasets\ndiabetes = datasets.load_diabetes()\nx = diabetes.data[:150]\ny = diabetes.target[:150]\nknn=KNeighborsClassifier()\n```\n:::\n\n\n::: {#584a8d3f .cell execution_count=32}\n``` {.python .cell-code}\nscores=cross_val_score(knn,x,y,cv=3,scoring='accuracy')\nfor i in range(scores.size):\n    print(f\"{i+1}번째 정확도: {scores[i]}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1번째 정확도: 0.0\n2번째 정확도: 0.0\n3번째 정확도: 0.02\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\USER\\anaconda3\\Lib\\site-packages\\sklearn\\model_selection\\_split.py:776: UserWarning:\n\nThe least populated class in y has only 1 members, which is less than n_splits=3.\n\n```\n:::\n:::\n\n\n<br>\n\n## 9.3. (실습) 농구선수 분류\n\n<br>\n\n::: {#a5beb508 .cell execution_count=33}\n``` {.python .cell-code}\ndf = pd.read_csv('./data/chap11_basketball_final.csv')\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Rebounds</th>\n      <th>Assists</th>\n      <th>Steals</th>\n      <th>Blocks</th>\n      <th>Turnovers</th>\n      <th>Target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>4.1</td>\n      <td>1.9</td>\n      <td>0.4</td>\n      <td>0.4</td>\n      <td>1.3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2.4</td>\n      <td>3.7</td>\n      <td>1.1</td>\n      <td>0.5</td>\n      <td>1.6</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2.2</td>\n      <td>1.0</td>\n      <td>0.5</td>\n      <td>0.3</td>\n      <td>1.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1.9</td>\n      <td>0.8</td>\n      <td>0.6</td>\n      <td>0.1</td>\n      <td>1.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2.5</td>\n      <td>0.3</td>\n      <td>0.3</td>\n      <td>0.4</td>\n      <td>0.8</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#06fe2461 .cell execution_count=34}\n``` {.python .cell-code}\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1340 entries, 0 to 1339\nData columns (total 6 columns):\n #   Column     Non-Null Count  Dtype  \n---  ------     --------------  -----  \n 0   Rebounds   1340 non-null   float64\n 1   Assists    1340 non-null   float64\n 2   Steals     1340 non-null   float64\n 3   Blocks     1340 non-null   float64\n 4   Turnovers  1340 non-null   float64\n 5   Target     1340 non-null   int64  \ndtypes: float64(5), int64(1)\nmemory usage: 62.9 KB\n```\n:::\n:::\n\n\n::: {#5fc18e63 .cell execution_count=35}\n``` {.python .cell-code}\ndf['Target'].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\nTarget\n1    831\n0    509\nName: count, dtype: int64\n```\n:::\n:::\n\n\n::: {#862f79ed .cell execution_count=36}\n``` {.python .cell-code}\n# 경력별 선수의 수\nplt.figure(figsize=(5, 3))\nsns.countplot(x=df['Target']) \nplt.title(\"Player\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](3_3_classification_files/figure-html/cell-37-output-1.png){width=463 height=315}\n:::\n:::\n\n\n::: {#04e1b5d2 .cell execution_count=37}\n``` {.python .cell-code}\n# 경력에 따른 농구 기술\nprint(f\"리바운드\\n {df['Rebounds'].groupby(df['Target']).mean()}\")\nprint(f\"어시스트\\n {df['Assists'].groupby(df['Target']).mean()}\")\nprint(f\"스틸\\n {df['Steals'].groupby(df['Target']).mean()}\")\nprint(f\"블록\\n {df['Blocks'].groupby(df['Target']).mean()}\")\nprint(f\"턴오버\\n {df['Turnovers'].groupby(df['Target']).mean()}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n리바운드\n Target\n0    2.247544\n1    3.516486\nName: Rebounds, dtype: float64\n어시스트\n Target\n0    1.221022\n1    1.752347\nName: Assists, dtype: float64\n스틸\n Target\n0    0.498232\n1    0.692178\nName: Steals, dtype: float64\n블록\n Target\n0    0.253438\n1    0.439110\nName: Blocks, dtype: float64\n턴오버\n Target\n0    0.942240\n1    1.347533\nName: Turnovers, dtype: float64\n```\n:::\n:::\n\n\n::: {#338a3334 .cell execution_count=38}\n``` {.python .cell-code}\n# 훈련데이터와 테스트데이터 분리\nx=df[['Rebounds','Assists','Steals','Blocks','Turnovers']]\ny=df[['Target']]\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split( x, y, test_size=0.2)\nprint(x_train.shape)\nprint(x_test.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1072, 5)\n(268, 5)\n```\n:::\n:::\n\n\n::: {#3471c0be .cell execution_count=39}\n``` {.python .cell-code}\n# 최적의 k찾기\nfrom sklearn.model_selection import cross_val_score\nknn=KNeighborsClassifier()\nscores=cross_val_score(knn,x,y,cv=5, scoring='accuracy')\n\nfor i in range(scores.size):\n    print(f\"{i+1}번째 정확도: {scores[i]}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1번째 정확도: 0.6492537313432836\n2번째 정확도: 0.6119402985074627\n3번째 정확도: 0.5708955223880597\n4번째 정확도: 0.6082089552238806\n5번째 정확도: 0.6455223880597015\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\USER\\anaconda3\\Lib\\site-packages\\sklearn\\neighbors\\_classification.py:238: DataConversionWarning:\n\nA column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n\nC:\\Users\\USER\\anaconda3\\Lib\\site-packages\\sklearn\\neighbors\\_classification.py:238: DataConversionWarning:\n\nA column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n\nC:\\Users\\USER\\anaconda3\\Lib\\site-packages\\sklearn\\neighbors\\_classification.py:238: DataConversionWarning:\n\nA column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n\nC:\\Users\\USER\\anaconda3\\Lib\\site-packages\\sklearn\\neighbors\\_classification.py:238: DataConversionWarning:\n\nA column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n\nC:\\Users\\USER\\anaconda3\\Lib\\site-packages\\sklearn\\neighbors\\_classification.py:238: DataConversionWarning:\n\nA column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n\n```\n:::\n:::\n\n\n::: {#dadb150c .cell execution_count=40}\n``` {.python .cell-code}\n# 모델 생성과 학습\nfrom sklearn.neighbors import KNeighborsClassifier\nneigh=KNeighborsClassifier(n_neighbors=7)\nneigh.fit(x_train, y_train)\nprint(neigh.classes_)\nprint(f'거리계산방법: {neigh.effective_metric_}')\nprint(f'샘플수: {neigh.n_samples_fit_}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0 1]\n거리계산방법: euclidean\n샘플수: 1072\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\USER\\anaconda3\\Lib\\site-packages\\sklearn\\neighbors\\_classification.py:238: DataConversionWarning:\n\nA column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n\n```\n:::\n:::\n\n\n::: {#c85fedc4 .cell execution_count=41}\n``` {.python .cell-code}\nprint(neigh.score(x_test,y_test))\nnew_x = [3,3,2,2,4]\nprediction = neigh.predict([new_x])\nprint(prediction)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.6231343283582089\n[1]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\USER\\anaconda3\\Lib\\site-packages\\sklearn\\base.py:493: UserWarning:\n\nX does not have valid feature names, but KNeighborsClassifier was fitted with feature names\n\n```\n:::\n:::\n\n\n",
    "supporting": [
      "3_3_classification_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}