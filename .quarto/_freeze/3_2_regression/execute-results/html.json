{
  "hash": "30eecf1e36fc166a7136c0a4294bcf31",
  "result": {
    "engine": "jupyter",
    "markdown": "---\njupyter: python3\n---\n\n\n\n\n<h1>8. 지도학습 : 회귀</h1>\n\n## 8.1. 상관분석\n+ 상관관계(correlation)\n  + 두 수치형 변수 간 선형적 관계(linear ralationship)를 의미함\n  + 산점도나 상관계수를 통해 확인할 수 있음\n\n<br>\n\n+ 상관계수(correlation coefficient)\n  + 두 변수 간 선형적 관계의 강도와 방향을 수치로 나타낸 통계량\n  + 상관계수는 -1에서 1 사이의 값을 가짐\n    + 절대값이 1에 가까울 수록 강한 상관관계, 0에 가까울수록 약한 상관관계를 가짐\n    + 양수이면 양의 상관관계, 음수이면 음의 상관관계를 가짐\n\n![](./images/fig3-6.jpg){width=70%}\n\n<br>\n\n+ \\[데이터\\] 캐글에서 제공하는 전세계 행복지수 데이터\n  + 평가지표 : 1인당 GDP, 사회적 지지 정도, 건강한 기대수명, 인생 선택의 자유, 기부\n  + \\[실습파일\\] [2020.csv](./data/2020.csv), [2021.csv](./data/2021.csv)\n\n<br>\n\n::: {#49c89867 .cell execution_count=1}\n``` {.python .cell-code}\n# 라이브러리 불러오기\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n```\n:::\n\n\n::: {#6ea46f9c .cell execution_count=2}\n``` {.python .cell-code}\n# 데이터 불러오기\ndf2020 = pd.read_csv('./data/2020.csv', index_col=0)\ndf2021 = pd.read_csv('./data/2021.csv', index_col=0)\n```\n:::\n\n\n::: {#8a931f38 .cell execution_count=3}\n``` {.python .cell-code}\n# 열 정보\ndf2020.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nCountry name                     object\nHappiness score                 float64\nupperwhisker                    float64\nlowerwhisker                    float64\nGDP per capita                  float64\nSocial support                  float64\nHealthy life expectancy         float64\nFreedom to make life choices    float64\nGenerosity                      float64\nDystopia                        float64\ndtype: object\n```\n:::\n:::\n\n\n::: {#1340d179 .cell execution_count=4}\n``` {.python .cell-code}\n# 2020년 데이터 확인\ndf2020.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country name</th>\n      <th>Happiness score</th>\n      <th>upperwhisker</th>\n      <th>lowerwhisker</th>\n      <th>GDP per capita</th>\n      <th>Social support</th>\n      <th>Healthy life expectancy</th>\n      <th>Freedom to make life choices</th>\n      <th>Generosity</th>\n      <th>Dystopia</th>\n    </tr>\n    <tr>\n      <th>Rank</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>Finland</td>\n      <td>7.8087</td>\n      <td>7.869766</td>\n      <td>7.747634</td>\n      <td>10.639267</td>\n      <td>0.954330</td>\n      <td>71.900825</td>\n      <td>0.949172</td>\n      <td>-0.059482</td>\n      <td>2.762835</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Denmark</td>\n      <td>7.6456</td>\n      <td>7.711245</td>\n      <td>7.579955</td>\n      <td>10.774001</td>\n      <td>0.955991</td>\n      <td>72.402504</td>\n      <td>0.951444</td>\n      <td>0.066202</td>\n      <td>2.432741</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Switzerland</td>\n      <td>7.5599</td>\n      <td>7.628528</td>\n      <td>7.491272</td>\n      <td>10.979933</td>\n      <td>0.942847</td>\n      <td>74.102448</td>\n      <td>0.921337</td>\n      <td>0.105911</td>\n      <td>2.350267</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Iceland</td>\n      <td>7.5045</td>\n      <td>7.621347</td>\n      <td>7.387653</td>\n      <td>10.772559</td>\n      <td>0.974670</td>\n      <td>73.000000</td>\n      <td>0.948892</td>\n      <td>0.246944</td>\n      <td>2.460688</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Norway</td>\n      <td>7.4880</td>\n      <td>7.556281</td>\n      <td>7.419719</td>\n      <td>11.087804</td>\n      <td>0.952487</td>\n      <td>73.200783</td>\n      <td>0.955750</td>\n      <td>0.134533</td>\n      <td>2.168266</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#b6069215 .cell execution_count=5}\n``` {.python .cell-code}\n# 2021년 데이터 확인\ndf2021.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country name</th>\n      <th>Happiness score</th>\n      <th>upperwhisker</th>\n      <th>lowerwhisker</th>\n      <th>GDP per capita</th>\n      <th>Social support</th>\n      <th>Healthy life expectancy</th>\n      <th>Freedom to make life choices</th>\n      <th>Generosity</th>\n      <th>Dystopia</th>\n    </tr>\n    <tr>\n      <th>Rank</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>Finland</td>\n      <td>7.842</td>\n      <td>7.904</td>\n      <td>7.780</td>\n      <td>10.775</td>\n      <td>0.954</td>\n      <td>72.0</td>\n      <td>0.949</td>\n      <td>-0.098</td>\n      <td>3.253</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Denmark</td>\n      <td>7.620</td>\n      <td>7.687</td>\n      <td>7.552</td>\n      <td>10.933</td>\n      <td>0.954</td>\n      <td>72.7</td>\n      <td>0.946</td>\n      <td>0.030</td>\n      <td>2.868</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Switzerland</td>\n      <td>7.571</td>\n      <td>7.643</td>\n      <td>7.500</td>\n      <td>11.117</td>\n      <td>0.942</td>\n      <td>74.4</td>\n      <td>0.919</td>\n      <td>0.025</td>\n      <td>2.839</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Iceland</td>\n      <td>7.554</td>\n      <td>7.670</td>\n      <td>7.438</td>\n      <td>10.878</td>\n      <td>0.983</td>\n      <td>73.0</td>\n      <td>0.955</td>\n      <td>0.160</td>\n      <td>2.967</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Netherlands</td>\n      <td>7.464</td>\n      <td>7.518</td>\n      <td>7.410</td>\n      <td>10.932</td>\n      <td>0.942</td>\n      <td>72.4</td>\n      <td>0.913</td>\n      <td>0.175</td>\n      <td>2.798</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#154f8149 .cell execution_count=6}\n``` {.python .cell-code}\n# 데이터 전처리 : 열 삭제\ndf2020.drop(['upperwhisker', 'lowerwhisker', 'Dystopia'], axis=1, inplace=True)\ndf2021.drop(['upperwhisker', 'lowerwhisker', 'Dystopia'], axis=1, inplace=True)\n```\n:::\n\n\n::: {#72a2830d .cell execution_count=7}\n``` {.python .cell-code}\n# 열 이름 변경 : 공백을 .으로 대체\ndf2020.columns = df2020.columns.str.replace(' ','.')\ndf2021.columns = df2021.columns.str.replace(' ','.')\n```\n:::\n\n\n::: {#57e46a3f .cell execution_count=8}\n``` {.python .cell-code}\n## 행복 지수에 영향을 주는 요인 파악1 : 행복 점수와 기능의 상관관계\n## 한 국가의 행복지수와 경제적(GDP), 법적 상태(Freedom) 간에 강한 관계가 있는가?\n# 데이터 전처리\ndf1 = df2020.copy()\ndf1.drop(['Social.support', 'Healthy.life.expectancy', 'Generosity'], axis=1, inplace=True)\ndf1\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country.name</th>\n      <th>Happiness.score</th>\n      <th>GDP.per.capita</th>\n      <th>Freedom.to.make.life.choices</th>\n    </tr>\n    <tr>\n      <th>Rank</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>Finland</td>\n      <td>7.8087</td>\n      <td>10.639267</td>\n      <td>0.949172</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Denmark</td>\n      <td>7.6456</td>\n      <td>10.774001</td>\n      <td>0.951444</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Switzerland</td>\n      <td>7.5599</td>\n      <td>10.979933</td>\n      <td>0.921337</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Iceland</td>\n      <td>7.5045</td>\n      <td>10.772559</td>\n      <td>0.948892</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Norway</td>\n      <td>7.4880</td>\n      <td>11.087804</td>\n      <td>0.955750</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>149</th>\n      <td>Central African Republic</td>\n      <td>3.4759</td>\n      <td>6.625160</td>\n      <td>0.640881</td>\n    </tr>\n    <tr>\n      <th>150</th>\n      <td>Rwanda</td>\n      <td>3.3123</td>\n      <td>7.600104</td>\n      <td>0.900589</td>\n    </tr>\n    <tr>\n      <th>151</th>\n      <td>Zimbabwe</td>\n      <td>3.2992</td>\n      <td>7.865712</td>\n      <td>0.711458</td>\n    </tr>\n    <tr>\n      <th>152</th>\n      <td>South Sudan</td>\n      <td>2.8166</td>\n      <td>7.425360</td>\n      <td>0.451314</td>\n    </tr>\n    <tr>\n      <th>153</th>\n      <td>Afghanistan</td>\n      <td>2.5669</td>\n      <td>7.462861</td>\n      <td>0.396573</td>\n    </tr>\n  </tbody>\n</table>\n<p>153 rows × 4 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#1d180691 .cell execution_count=9}\n``` {.python .cell-code}\ndf1.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nCountry.name                     object\nHappiness.score                 float64\nGDP.per.capita                  float64\nFreedom.to.make.life.choices    float64\ndtype: object\n```\n:::\n:::\n\n\n::: {#d9600ef2 .cell execution_count=10}\n``` {.python .cell-code}\n# 상관계수 계산 : 2020년 데이터\ncorr = df1.select_dtypes(include='number').corr()\ncorr['Happiness.score'].sort_values(ascending=False)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nHappiness.score                 1.000000\nGDP.per.capita                  0.775374\nFreedom.to.make.life.choices    0.590597\nName: Happiness.score, dtype: float64\n```\n:::\n:::\n\n\n::: {#93798d7b .cell execution_count=11}\n``` {.python .cell-code}\n# 히트맵 : 2020년 데이터\nplt.figure(figsize=(8, 5))\nsns.heatmap(corr, annot=True, cmap='Blues')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](3_2_regression_files/figure-html/cell-12-output-1.png){width=779 height=416}\n:::\n:::\n\n\n::: {#42fabade .cell execution_count=12}\n``` {.python .cell-code}\n# 데이터 전처리\ndf2 = df2021.copy()\ndf2.drop(['Social.support', 'Healthy.life.expectancy', 'Generosity'], axis=1, inplace=True)\ndf2\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country.name</th>\n      <th>Happiness.score</th>\n      <th>GDP.per.capita</th>\n      <th>Freedom.to.make.life.choices</th>\n    </tr>\n    <tr>\n      <th>Rank</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>Finland</td>\n      <td>7.842</td>\n      <td>10.775</td>\n      <td>0.949</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Denmark</td>\n      <td>7.620</td>\n      <td>10.933</td>\n      <td>0.946</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Switzerland</td>\n      <td>7.571</td>\n      <td>11.117</td>\n      <td>0.919</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Iceland</td>\n      <td>7.554</td>\n      <td>10.878</td>\n      <td>0.955</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Netherlands</td>\n      <td>7.464</td>\n      <td>10.932</td>\n      <td>0.913</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>145</th>\n      <td>Lesotho</td>\n      <td>3.512</td>\n      <td>7.926</td>\n      <td>0.715</td>\n    </tr>\n    <tr>\n      <th>146</th>\n      <td>Botswana</td>\n      <td>3.467</td>\n      <td>9.782</td>\n      <td>0.824</td>\n    </tr>\n    <tr>\n      <th>147</th>\n      <td>Rwanda</td>\n      <td>3.415</td>\n      <td>7.676</td>\n      <td>0.897</td>\n    </tr>\n    <tr>\n      <th>148</th>\n      <td>Zimbabwe</td>\n      <td>3.145</td>\n      <td>7.943</td>\n      <td>0.677</td>\n    </tr>\n    <tr>\n      <th>149</th>\n      <td>Afghanistan</td>\n      <td>2.523</td>\n      <td>7.695</td>\n      <td>0.382</td>\n    </tr>\n  </tbody>\n</table>\n<p>149 rows × 4 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#a0be7f0c .cell execution_count=13}\n``` {.python .cell-code}\n# 히트맵 : 2021년 데이터\nplt.figure(figsize=(8, 5))\nsns.heatmap(df2.select_dtypes(include='number').corr(), annot=True, cmap='PuBuGn')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](3_2_regression_files/figure-html/cell-14-output-1.png){width=779 height=416}\n:::\n:::\n\n\n<br>\n\n+ 분석 결과\n  + 위에 표시된 2개의 히트맵은 2020년, 2021년 각각에 해당하는 3개 열, 점수, GDP, 자유 상관관 관계 매트릭스를 표시함\n  1. GDP는 행복지수와 어떤 관련이 있는가?\n     + 히트맵에서 GDP.per.capita와 Score 간의 상관 계수는 총 2년 동안 ~ 0.79로 GDP에 대한 시민의 만족도와 행복도 점수 사이에 강한 양의 관계가 있음을 나타냅니다. GDP.per.capita는 한 국가의 경제 성장을 추적하는 지표입니다. 긍정적인 경제 성장률을 보이는 국가의 사람들은 더 높은 소득과 더 나은 생활 수준으로 이어지기 때문에 더 행복해지는 경향이 있습니다. 따라서 우리는 만족을 보장하기 위해 한 국가의 GDP가 최우선 순위 중 하나가 되어야 한다고 결론지었습니다.\n  2. 행복 점수와 자유의 관계는?\n     + 자유와 점수 사이의 상관 계수는 2년 전체에서 ~ 0.61로 자유에 대한 인식과 국가의 행복 지수 사이에 중간 정도의 양의 관계를 나타냅니다. 자유에 대한 이러한 인식을 일반화하는 것은 연구에 따르면 세계의 다른 지역에 속한 사람들마다 다르기 때문에 어려운 작업입니다. 그럼에도 불구하고 여전히 국가의 행복지수에 중요한 기여를 합니다.\n    \n<br>\n\n::: {#3bc8efd4 .cell execution_count=14}\n``` {.python .cell-code}\n## 행복 지수에 영향을 주는 요인 파악2 : 행복 점수와 사회적 상태의 상관관계\n## 한 국가의 사회적 상태에 대한 인식은 행복 지수에 어떤 영향을 미치는가?\n# 데이터 전처리\nx1 = df2020[['Generosity', 'Social.support', 'Happiness.score']].copy()\nx2 = df2021[['Generosity', 'Social.support', 'Happiness.score']].copy()\n```\n:::\n\n\n::: {#77cea4b1 .cell execution_count=15}\n``` {.python .cell-code}\n# 히트맵 : 2020년 데이터\na1 = x1.corr()\nplt.figure(figsize=(8, 5))\nsns.heatmap(a1, annot=True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](3_2_regression_files/figure-html/cell-16-output-1.png){width=597 height=416}\n:::\n:::\n\n\n::: {#e545561a .cell execution_count=16}\n``` {.python .cell-code}\n# 히트맵 : 2021년 데이터\na2 = x2.corr()\nplt.figure(figsize=(8, 5))\nsns.heatmap(a2, annot=True, cmap='GnBu')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](3_2_regression_files/figure-html/cell-17-output-1.png){width=597 height=416}\n:::\n:::\n\n\n<br>\n\n+ 분석 결과\n  + 관대함과 사회적 지지는 행복 점수와 어떤 관련이 있는가?\n     + 관대함과 사회적 지지 상관 계수는 -0.057, -0.11으로 관찰되어 매우 약한 음의 관계를 나타냅니다. 두 메트릭 간에 선형 변화가 많이 관찰되지 않습니다. 관대함은 시민들이 서로에게서 얻는 인식입니다. 관대함과 점수 상관계수는 0.069, -0.018으로 관찰되어 매우 약한 음의 관계를 나타낸다.\n     + 한편, 사회적 지지와 점수의 상관값은 0.77, 0.76로 강한 양의 관계를 나타낸다. 사회적 지지는 사람들이 가족, 친구, 지인 등과 함께 얼마나 행복한지에 대한 인식입니다. 이들은 일상생활에서 거의 모든 사람들이 대하는 사람들이기 때문에 사회적 지지에 대한 인식이 행복지수를 결정하는 중요한 요소라고 볼 수 있다.\n\n<br>\n\n::: {#1c42d22c .cell execution_count=17}\n``` {.python .cell-code}\n# 전체 상관계수 : 2020년 데이터\ncorr = df2020.select_dtypes(include='number').corr()\n\nplt.figure(figsize=(8, 5))\nupp_mat = np.triu(corr)\nsns.heatmap(corr, mask=upp_mat,vmin=-1, vmax=1, annot=True, cmap ='RdYlBu_r', linewidths=4)\nplt.xticks(rotation=45)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](3_2_regression_files/figure-html/cell-18-output-1.png){width=798 height=550}\n:::\n:::\n\n\n::: {#0cafd27f .cell execution_count=18}\n``` {.python .cell-code}\n# 전체 상관계수 : 2021년 데이터\n# 행복도에 가장 큰 영향을 주는 것은 경제적 여유, 사회적 지지, 기대수명(건간), 자유도 순인 것을 알 수 있었다.\ncorr = df2021.select_dtypes(include='number').corr()\n\nplt.figure(figsize=(8, 5))\nupp_mat = np.triu(corr)\nsns.heatmap(corr, mask=upp_mat, vmin=-1, vmax=1,annot = True, cmap ='PiYG', linewidths=4)\nplt.xticks(rotation=45)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](3_2_regression_files/figure-html/cell-19-output-1.png){width=798 height=550}\n:::\n:::\n\n\n::: {#d286f7d2 .cell execution_count=19}\n``` {.python .cell-code}\n## 상위 50위 국가의 기대수명과 GDP 간 관계\n# 데이터 전처리\ntop50 = df2021.head(50)\ntop50.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country.name</th>\n      <th>Happiness.score</th>\n      <th>GDP.per.capita</th>\n      <th>Social.support</th>\n      <th>Healthy.life.expectancy</th>\n      <th>Freedom.to.make.life.choices</th>\n      <th>Generosity</th>\n    </tr>\n    <tr>\n      <th>Rank</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>Finland</td>\n      <td>7.842</td>\n      <td>10.775</td>\n      <td>0.954</td>\n      <td>72.0</td>\n      <td>0.949</td>\n      <td>-0.098</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Denmark</td>\n      <td>7.620</td>\n      <td>10.933</td>\n      <td>0.954</td>\n      <td>72.7</td>\n      <td>0.946</td>\n      <td>0.030</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Switzerland</td>\n      <td>7.571</td>\n      <td>11.117</td>\n      <td>0.942</td>\n      <td>74.4</td>\n      <td>0.919</td>\n      <td>0.025</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Iceland</td>\n      <td>7.554</td>\n      <td>10.878</td>\n      <td>0.983</td>\n      <td>73.0</td>\n      <td>0.955</td>\n      <td>0.160</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Netherlands</td>\n      <td>7.464</td>\n      <td>10.932</td>\n      <td>0.942</td>\n      <td>72.4</td>\n      <td>0.913</td>\n      <td>0.175</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#bebb69c0 .cell execution_count=20}\n``` {.python .cell-code}\n# 산점도\nsns.set_theme(style='dark')\nplt.figure(figsize=(25, 7))\nax = sns.scatterplot(data=top50, x='Country.name', y='Healthy.life.expectancy', size='GDP.per.capita',\n                     sizes=(400, 1500), hue='GDP.per.capita')\nplt.xticks(rotation=90, fontsize=15, color='midnightblue')\nplt.yticks(fontsize=15, color='midnightblue')\nplt.xlabel('Country', size=15, color='midnightblue')\nplt.ylabel('Healthy Life Expectancy', size=15, color='midnightblue')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](3_2_regression_files/figure-html/cell-21-output-1.png){width=1938 height=799}\n:::\n:::\n\n\n::: {#288a9577 .cell execution_count=21}\n``` {.python .cell-code}\n# 우리나라는 앞의 3가지가 각각 몇 위일까?\neconomy = df2020.loc[:,['Country.name','GDP.per.capita']]\neconomy = economy.groupby(economy['Country.name'])['GDP.per.capita'].mean().sort_values(ascending=False)\neconomy = economy.rank(method='min',ascending=False)['South Korea']\n\nsocial = df2020.loc[:,['Country.name','Social.support']]\nsocial = social.groupby(social['Country.name'])['Social.support'].mean().sort_values(ascending=False)\nsocial = social.rank(method='min',ascending=False)['South Korea']\n\nhealth = df2020.loc[:,['Country.name','Healthy.life.expectancy']]\nhealth = health.groupby(health['Country.name'])['Healthy.life.expectancy'].mean().sort_values(ascending=False)\nhealth = health.rank(method='min',ascending=False)['South Korea']\n\nfree = df2020.loc[:,['Country.name','Freedom.to.make.life.choices']]\nfree= free.groupby(free['Country.name'])['Freedom.to.make.life.choices'].mean().sort_values(ascending=False)\nfree = free.rank(method='min',ascending=False)['South Korea']\n\nprint(f'153개국 중 대한민국의 \\nGDP 순위:{economy.astype(int)}위\\n사회적 지위 순위:{social.astype(int)}위\\n기대수명 순위:{health.astype(int)}위\\n자유도 순위:{free.astype(int)}위')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n153개국 중 대한민국의 \nGDP 순위:27위\n사회적 지위 순위:99위\n기대수명 순위:10위\n자유도 순위:140위\n```\n:::\n:::\n\n\n<br>\n\n+ 분석 결과\n  + GDP 순위는 양호, 기대수명은 굉장히 높다. 다른나라보다 국가 복지 수준이 높은 덕에 높은 순위를 차지한 것 같다.\n  + 사회적 지위 순위도 하위 수준이었다.\n  + 자유도는 거의 최하위 수준이였다. 자유도의 정의는 무엇일까. 정치적으로 문제가 있으면 자유롭게 시위도하고, 표현의 자유, 언론의 자유, 알권리 모두 상위라고 생각하는데 이렇게 최 하위 수준이 나온 이유는 무엇일까.\n행복도가 높은 유럽지역처럼 길거리에서 느껴지는 여유로움이 자유도의 큰 부분을 차지하는 것일까?\n\n<br>\n\n::: {#a50a7749 .cell execution_count=22}\n``` {.python .cell-code}\n# 산점도 행렬 : 상관관계 확인\nsns.pairplot(df2020)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](3_2_regression_files/figure-html/cell-23-output-1.png){width=1414 height=1414}\n:::\n:::\n\n\n<br>\n\n## 8.2. 회귀분석\n\n::: {#19157e33 .cell execution_count=23}\n``` {.python .cell-code}\n# 한글 깨짐 현상에 대한 해결 방법\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n\nplt.rc('font', family='Malgun Gothic')  # 또는 '맑은 고딕'\nmpl.rcParams['axes.unicode_minus'] = False\n```\n:::\n\n\n::: {#5803db25 .cell execution_count=24}\n``` {.python .cell-code}\n# scikit-learn 설치하기\n#!pip install scikit-learn\n```\n:::\n\n\n::: {#5f6c1fa4 .cell execution_count=25}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n# 공부시간 : 독립변수, 시험점수 : 종속변수\nx = [[2],[4],[6],[8],[10]]       # 공부시간\ny = [[81],[93],[90],[97],[100]]  # 시험점수\n\n# 산점도 그래프\nplt.scatter(x,y)\nplt.show()\n\n# 학습시키기\nmodel = LinearRegression()      # 선형회귀분석 객체 생성하기\n\n# 선형회귀분석 객체를 이용하여 학습시키기\nmodel.fit(x,y)\n\n# 예측하기\nresult = model.predict([[7]])   # 7시간 학습\nprint(f'예상점수:{result}')\n```\n\n::: {.cell-output .cell-output-display}\n![](3_2_regression_files/figure-html/cell-26-output-1.png){width=588 height=416}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n예상점수:[[94.3]]\n```\n:::\n:::\n\n\n<br>\n\n### 8.2.1. 단순선형 회귀분석\n\n<br>\n\n::: {#e02a8688 .cell execution_count=26}\n``` {.python .cell-code}\n# 데이터 불러오기\nseoul = pd.read_csv('./data/(2010-2020) weather.csv', encoding='cp949')\nseoul.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>날짜</th>\n      <th>지점</th>\n      <th>평균기온(℃)</th>\n      <th>최저기온(℃)</th>\n      <th>최고기온(℃)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2010-01-01</td>\n      <td>108</td>\n      <td>-7.6</td>\n      <td>-12.7</td>\n      <td>-3.6</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2010-01-02</td>\n      <td>108</td>\n      <td>-3.6</td>\n      <td>-7.4</td>\n      <td>0.2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2010-01-03</td>\n      <td>108</td>\n      <td>-6.8</td>\n      <td>-10.5</td>\n      <td>-3.2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2010-01-04</td>\n      <td>108</td>\n      <td>-5.9</td>\n      <td>-8.0</td>\n      <td>-3.4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2010-01-05</td>\n      <td>108</td>\n      <td>-9.9</td>\n      <td>-12.3</td>\n      <td>-7.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#f8960f68 .cell execution_count=27}\n``` {.python .cell-code}\nseoul.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 4018 entries, 0 to 4017\nData columns (total 5 columns):\n #   Column   Non-Null Count  Dtype  \n---  ------   --------------  -----  \n 0   날짜       4018 non-null   object \n 1   지점       4018 non-null   int64  \n 2   평균기온(℃)  4018 non-null   float64\n 3   최저기온(℃)  4018 non-null   float64\n 4   최고기온(℃)  4017 non-null   float64\ndtypes: float64(3), int64(1), object(1)\nmemory usage: 157.1+ KB\n```\n:::\n:::\n\n\n::: {#c1a3ae1a .cell execution_count=28}\n``` {.python .cell-code}\nseoul.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>지점</th>\n      <th>평균기온(℃)</th>\n      <th>최저기온(℃)</th>\n      <th>최고기온(℃)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>4018.0</td>\n      <td>4018.000000</td>\n      <td>4018.000000</td>\n      <td>4017.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>108.0</td>\n      <td>12.965207</td>\n      <td>8.991015</td>\n      <td>17.699627</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>0.0</td>\n      <td>10.803691</td>\n      <td>10.932678</td>\n      <td>10.976719</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>108.0</td>\n      <td>-14.800000</td>\n      <td>-18.000000</td>\n      <td>-10.700000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>108.0</td>\n      <td>3.700000</td>\n      <td>-0.300000</td>\n      <td>8.200000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>108.0</td>\n      <td>14.250000</td>\n      <td>9.800000</td>\n      <td>19.600000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>108.0</td>\n      <td>22.800000</td>\n      <td>18.900000</td>\n      <td>27.400000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>108.0</td>\n      <td>33.700000</td>\n      <td>30.300000</td>\n      <td>39.600000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#9f9035a3 .cell execution_count=29}\n``` {.python .cell-code}\n# 지점 변수 삭제\nseoul.drop('지점', axis=1, inplace=True)\nseoul.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>날짜</th>\n      <th>평균기온(℃)</th>\n      <th>최저기온(℃)</th>\n      <th>최고기온(℃)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2010-01-01</td>\n      <td>-7.6</td>\n      <td>-12.7</td>\n      <td>-3.6</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2010-01-02</td>\n      <td>-3.6</td>\n      <td>-7.4</td>\n      <td>0.2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2010-01-03</td>\n      <td>-6.8</td>\n      <td>-10.5</td>\n      <td>-3.2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2010-01-04</td>\n      <td>-5.9</td>\n      <td>-8.0</td>\n      <td>-3.4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2010-01-05</td>\n      <td>-9.9</td>\n      <td>-12.3</td>\n      <td>-7.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#e75e01e7 .cell execution_count=30}\n``` {.python .cell-code}\nseoul.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>날짜</th>\n      <th>평균기온(℃)</th>\n      <th>최저기온(℃)</th>\n      <th>최고기온(℃)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2010-01-01</td>\n      <td>-7.6</td>\n      <td>-12.7</td>\n      <td>-3.6</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2010-01-02</td>\n      <td>-3.6</td>\n      <td>-7.4</td>\n      <td>0.2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2010-01-03</td>\n      <td>-6.8</td>\n      <td>-10.5</td>\n      <td>-3.2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2010-01-04</td>\n      <td>-5.9</td>\n      <td>-8.0</td>\n      <td>-3.4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2010-01-05</td>\n      <td>-9.9</td>\n      <td>-12.3</td>\n      <td>-7.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#93ed036b .cell execution_count=31}\n``` {.python .cell-code}\n# 열 이름 변경\nseoul.columns = ['날짜', '평균기온', '최저기온', '최고기온']\nseoul.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\nIndex(['날짜', '평균기온', '최저기온', '최고기온'], dtype='object')\n```\n:::\n:::\n\n\n::: {#156680fb .cell execution_count=32}\n``` {.python .cell-code}\nseoul.isnull().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\n날짜      0\n평균기온    0\n최저기온    0\n최고기온    1\ndtype: int64\n```\n:::\n:::\n\n\n::: {#986d68b3 .cell execution_count=33}\n``` {.python .cell-code}\n# 결측값을 포함하는 행 삭제\nseoul.dropna(subset=['최고기온'], axis=0, inplace=True)\n```\n:::\n\n\n::: {#e85a8866 .cell execution_count=34}\n``` {.python .cell-code}\nseoul.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nIndex: 4017 entries, 0 to 4017\nData columns (total 4 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   날짜      4017 non-null   object \n 1   평균기온    4017 non-null   float64\n 2   최저기온    4017 non-null   float64\n 3   최고기온    4017 non-null   float64\ndtypes: float64(3), object(1)\nmemory usage: 156.9+ KB\n```\n:::\n:::\n\n\n::: {#8e0d32ed .cell execution_count=35}\n``` {.python .cell-code}\nseoul['날짜'] = pd.to_datetime(seoul['날짜'])\n```\n:::\n\n\n::: {#e8a5b596 .cell execution_count=36}\n``` {.python .cell-code}\n# 열 추가\nseoul['연도'] = seoul['날짜'].dt.year\nseoul['월']=seoul['날짜'].dt.month\nseoul['일']=seoul['날짜'].dt.day\nseoul.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>날짜</th>\n      <th>평균기온</th>\n      <th>최저기온</th>\n      <th>최고기온</th>\n      <th>연도</th>\n      <th>월</th>\n      <th>일</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2010-01-01</td>\n      <td>-7.6</td>\n      <td>-12.7</td>\n      <td>-3.6</td>\n      <td>2010</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2010-01-02</td>\n      <td>-3.6</td>\n      <td>-7.4</td>\n      <td>0.2</td>\n      <td>2010</td>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2010-01-03</td>\n      <td>-6.8</td>\n      <td>-10.5</td>\n      <td>-3.2</td>\n      <td>2010</td>\n      <td>1</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2010-01-04</td>\n      <td>-5.9</td>\n      <td>-8.0</td>\n      <td>-3.4</td>\n      <td>2010</td>\n      <td>1</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2010-01-05</td>\n      <td>-9.9</td>\n      <td>-12.3</td>\n      <td>-7.0</td>\n      <td>2010</td>\n      <td>1</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#d71fae18 .cell execution_count=37}\n``` {.python .cell-code}\n# 필터링\nconditions = (seoul['날짜'].dt.month==8) & (seoul['날짜'].dt.day==15)\nseoul0815 = seoul[conditions]\nseoul0815\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>날짜</th>\n      <th>평균기온</th>\n      <th>최저기온</th>\n      <th>최고기온</th>\n      <th>연도</th>\n      <th>월</th>\n      <th>일</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>226</th>\n      <td>2010-08-15</td>\n      <td>26.6</td>\n      <td>24.6</td>\n      <td>30.2</td>\n      <td>2010</td>\n      <td>8</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>591</th>\n      <td>2011-08-15</td>\n      <td>24.5</td>\n      <td>22.9</td>\n      <td>26.9</td>\n      <td>2011</td>\n      <td>8</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>957</th>\n      <td>2012-08-15</td>\n      <td>23.7</td>\n      <td>22.4</td>\n      <td>27.1</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>1322</th>\n      <td>2013-08-15</td>\n      <td>28.7</td>\n      <td>25.8</td>\n      <td>32.4</td>\n      <td>2013</td>\n      <td>8</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>1687</th>\n      <td>2014-08-15</td>\n      <td>24.9</td>\n      <td>20.9</td>\n      <td>29.6</td>\n      <td>2014</td>\n      <td>8</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>2052</th>\n      <td>2015-08-15</td>\n      <td>27.1</td>\n      <td>23.1</td>\n      <td>30.8</td>\n      <td>2015</td>\n      <td>8</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>2418</th>\n      <td>2016-08-15</td>\n      <td>29.1</td>\n      <td>25.8</td>\n      <td>34.0</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>2783</th>\n      <td>2017-08-15</td>\n      <td>21.9</td>\n      <td>20.8</td>\n      <td>24.0</td>\n      <td>2017</td>\n      <td>8</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>3148</th>\n      <td>2018-08-15</td>\n      <td>31.7</td>\n      <td>28.3</td>\n      <td>38.0</td>\n      <td>2018</td>\n      <td>8</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>3513</th>\n      <td>2019-08-15</td>\n      <td>25.9</td>\n      <td>23.9</td>\n      <td>28.6</td>\n      <td>2019</td>\n      <td>8</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>3879</th>\n      <td>2020-08-15</td>\n      <td>26.1</td>\n      <td>25.0</td>\n      <td>27.0</td>\n      <td>2020</td>\n      <td>8</td>\n      <td>15</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#1f052d6a .cell execution_count=38}\n``` {.python .cell-code}\nseoul0815.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nIndex: 11 entries, 226 to 3879\nData columns (total 7 columns):\n #   Column  Non-Null Count  Dtype         \n---  ------  --------------  -----         \n 0   날짜      11 non-null     datetime64[ns]\n 1   평균기온    11 non-null     float64       \n 2   최저기온    11 non-null     float64       \n 3   최고기온    11 non-null     float64       \n 4   연도      11 non-null     int32         \n 5   월       11 non-null     int32         \n 6   일       11 non-null     int32         \ndtypes: datetime64[ns](1), float64(3), int32(3)\nmemory usage: 572.0 bytes\n```\n:::\n:::\n\n\n::: {#a5ce8493 .cell execution_count=39}\n``` {.python .cell-code}\n# 결측값 확인\nseoul0815.isnull().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\n날짜      0\n평균기온    0\n최저기온    0\n최고기온    0\n연도      0\n월       0\n일       0\ndtype: int64\n```\n:::\n:::\n\n\n::: {#ad75c9c8 .cell execution_count=40}\n``` {.python .cell-code}\n# 연도에 따른 평균기온 변화\nfig = plt.figure(figsize=(5, 3))\nX = seoul0815[['연도']]\nY = seoul0815['평균기온']\nplt.xlabel('연도')\nplt.ylabel('평균기온')\nplt.scatter(X, Y)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](3_2_regression_files/figure-html/cell-41-output-1.png){width=441 height=292}\n:::\n:::\n\n\n::: {#0316ba56 .cell execution_count=41}\n``` {.python .cell-code}\n# jointplot 그리기\nsns.jointplot(x='연도', y ='평균기온', kind='reg', data=seoul0815)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](3_2_regression_files/figure-html/cell-42-output-1.png){width=556 height=559}\n:::\n:::\n\n\n::: {#00264074 .cell execution_count=42}\n``` {.python .cell-code}\n# 단순선형 회귀분석 : 2022년 8월 15일 기온 예측\nmodel = LinearRegression()\nX = seoul0815[['연도']]\nY = seoul0815['평균기온']\nmodel.fit(X, Y)\n\nfuture = pd.DataFrame({'연도': [2022]})\nresult = model.predict(future)\nprint(result)   \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[27.50818182]\n```\n:::\n:::\n\n\n<br>\n\n+ fit() 메서드는 선형 회귀 모델에 필요한 두 가지 변수를 전달\n  + 기울기: line_fitter.coef_\n  + 절편: line_fitter.intercept_\n  + 이렇게 하면 새로운 X 값을 넣어 y값을 예측할 수 있게 됨\n  + 싸이킷런 단순 선형회귀에서는 최소제곱법(Ordinary Least Squares)을 활용하기 때문\n\n<br>\n\n::: {#b60670ab .cell execution_count=43}\n``` {.python .cell-code}\nseoul0815.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nIndex: 11 entries, 226 to 3879\nData columns (total 7 columns):\n #   Column  Non-Null Count  Dtype         \n---  ------  --------------  -----         \n 0   날짜      11 non-null     datetime64[ns]\n 1   평균기온    11 non-null     float64       \n 2   최저기온    11 non-null     float64       \n 3   최고기온    11 non-null     float64       \n 4   연도      11 non-null     int32         \n 5   월       11 non-null     int32         \n 6   일       11 non-null     int32         \ndtypes: datetime64[ns](1), float64(3), int32(3)\nmemory usage: 572.0 bytes\n```\n:::\n:::\n\n\n::: {#01024297 .cell execution_count=44}\n``` {.python .cell-code}\n# 8월 15일 평균기온을 산점도, 회귀선 출력하기\nx=seoul0815['연도']\ny=seoul0815['평균기온']\n\nfp1 = np.polyfit(x, y,2)\nf1 = np.poly1d(fp1)\nfx = np.linspace(2010, 2020)\n\nplt.figure(figsize=(5, 3))\nplt.scatter(x,y)\nplt.plot(fx, f1(fx), ls='dashed', lw=3, color='g')\n\nplt.xlabel('연도')\nplt.ylabel('평균기온')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](3_2_regression_files/figure-html/cell-45-output-1.png){width=441 height=292}\n:::\n:::\n\n\n::: {#18da4124 .cell execution_count=45}\n``` {.python .cell-code}\nfp1\nf1\nfx\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```\narray([2010.        , 2010.20408163, 2010.40816327, 2010.6122449 ,\n       2010.81632653, 2011.02040816, 2011.2244898 , 2011.42857143,\n       2011.63265306, 2011.83673469, 2012.04081633, 2012.24489796,\n       2012.44897959, 2012.65306122, 2012.85714286, 2013.06122449,\n       2013.26530612, 2013.46938776, 2013.67346939, 2013.87755102,\n       2014.08163265, 2014.28571429, 2014.48979592, 2014.69387755,\n       2014.89795918, 2015.10204082, 2015.30612245, 2015.51020408,\n       2015.71428571, 2015.91836735, 2016.12244898, 2016.32653061,\n       2016.53061224, 2016.73469388, 2016.93877551, 2017.14285714,\n       2017.34693878, 2017.55102041, 2017.75510204, 2017.95918367,\n       2018.16326531, 2018.36734694, 2018.57142857, 2018.7755102 ,\n       2018.97959184, 2019.18367347, 2019.3877551 , 2019.59183673,\n       2019.79591837, 2020.        ])\n```\n:::\n:::\n\n\n::: {#0551e08a .cell execution_count=46}\n``` {.python .cell-code}\n# 시본 모듈로 추세선 넣기\nfig = plt.figure(figsize=(5, 3))   \nsns.regplot(x='연도', y='평균기온', data=seoul0815) \nplt.grid()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](3_2_regression_files/figure-html/cell-47-output-1.png){width=441 height=292}\n:::\n:::\n\n\n::: {#0aedec3b .cell execution_count=47}\n``` {.python .cell-code}\nsns.jointplot(x='연도', y='평균기온', data=seoul0815, kind='reg')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](3_2_regression_files/figure-html/cell-48-output-1.png){width=556 height=559}\n:::\n:::\n\n\n::: {#79b14a84 .cell execution_count=48}\n``` {.python .cell-code}\nsns.pairplot(seoul0815, kind='reg')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](3_2_regression_files/figure-html/cell-49-output-1.png){width=1412 height=1412}\n:::\n:::\n\n\n<br>\n\n### 8.2.2. 다중선형 회귀분석\n\n<br>\n\n::: {#277afa4b .cell execution_count=49}\n``` {.python .cell-code}\nseoul.info()\nseoul.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nIndex: 4017 entries, 0 to 4017\nData columns (total 7 columns):\n #   Column  Non-Null Count  Dtype         \n---  ------  --------------  -----         \n 0   날짜      4017 non-null   datetime64[ns]\n 1   평균기온    4017 non-null   float64       \n 2   최저기온    4017 non-null   float64       \n 3   최고기온    4017 non-null   float64       \n 4   연도      4017 non-null   int32         \n 5   월       4017 non-null   int32         \n 6   일       4017 non-null   int32         \ndtypes: datetime64[ns](1), float64(3), int32(3)\nmemory usage: 204.0 KB\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=49}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>날짜</th>\n      <th>평균기온</th>\n      <th>최저기온</th>\n      <th>최고기온</th>\n      <th>연도</th>\n      <th>월</th>\n      <th>일</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2010-01-01</td>\n      <td>-7.6</td>\n      <td>-12.7</td>\n      <td>-3.6</td>\n      <td>2010</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2010-01-02</td>\n      <td>-3.6</td>\n      <td>-7.4</td>\n      <td>0.2</td>\n      <td>2010</td>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2010-01-03</td>\n      <td>-6.8</td>\n      <td>-10.5</td>\n      <td>-3.2</td>\n      <td>2010</td>\n      <td>1</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2010-01-04</td>\n      <td>-5.9</td>\n      <td>-8.0</td>\n      <td>-3.4</td>\n      <td>2010</td>\n      <td>1</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2010-01-05</td>\n      <td>-9.9</td>\n      <td>-12.3</td>\n      <td>-7.0</td>\n      <td>2010</td>\n      <td>1</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#e599097e .cell execution_count=50}\n``` {.python .cell-code}\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\n\nX = seoul0815[['연도','최저기온','최고기온']]\nY = seoul0815['평균기온']\n\nmodel.fit(X, Y)\nnew_data = pd.DataFrame({'연도': [2022], '최저기온': [24], '최고기온': [33]})\nresult = model.predict(new_data)\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[28.08381871]\n```\n:::\n:::\n\n\n::: {#c8fb671f .cell execution_count=51}\n``` {.python .cell-code}\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nplt.figure(figsize=(10,3))\n\n# 데이터 준비 : 속성(변수) 2가지 선택\nX = seoul[['연도','최저기온','최고기온']]\nY = seoul['평균기온']\n\n# 먼저 X와 Y변수를 받아 사이킷런의 train_test_split함수를 통해 7:3의 비율로 데이터를 분할한다.\nx_train, x_test, y_train, y_test = train_test_split(X,Y, train_size = 0.7, test_size = 0.3)\n\n#다중 선형 회귀 모델 생성\nmodel = LinearRegression()\nmodel.fit(x_train, y_train)\n\n# 모델 테스트하기 : test셋의 일부 데이터를 가지고 모델의 예측결과가 얼마나 좋게 나타나는지 확인\nplt.plot(model.predict(x_test[:50]), label='predict')\nplt.plot(y_test[:50].values.reshape(-1, 1), label='real temp')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](3_2_regression_files/figure-html/cell-52-output-1.png){width=798 height=269}\n:::\n:::\n\n\n::: {#d82fd5e0 .cell execution_count=52}\n``` {.python .cell-code}\n# 전체 데이터를 이용해 값을 예측하고 실제 값과 비교하여 산점도 그리기\nplt.figure(figsize=(10, 3))\ny_predict = model.predict(x_test)\nplt.scatter(y_test, y_predict, alpha = 0.4)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](3_2_regression_files/figure-html/cell-53-output-1.png){width=798 height=269}\n:::\n:::\n\n\n::: {#cbc77399 .cell execution_count=53}\n``` {.python .cell-code}\n# score 메소드를 통해 다중선형회귀 모델의 성능을 측정\nprint(model.score(x_train,y_train))\n# 결정계수 R²의 최댓값은 1이며 이 수치가 클수록 실제값과 예측값이 유사함을 의미한다.\n# 우리가 모델링한 다중선형회귀모델은 약 0.99의 결정계수를 가지며 \n# 이는 X변수들이 y변수에 미치는 영향이 99%로 X변수들이 평균기온값 변동의 99%를 설명할 수 있다는 뜻임\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.9977491062095026\n```\n:::\n:::\n\n\n",
    "supporting": [
      "3_2_regression_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}