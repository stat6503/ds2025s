{
  "hash": "84d2d3fbedda03f28a24e83e4bfed512",
  "result": {
    "engine": "jupyter",
    "markdown": "---\njupyter: python3\n---\n\n\n\n\n<h1>8. 지도학습 : 회귀</h1>\n\n## 8.1. 상관분석\n### 8.1.1. 상관계수\n+ 상관분석(correlation analysis)\n  + 두 수치형 변수 간 선형적인 관계(linear relationship)를 파악하는 통계 기법\n  + 상관계수(correlation coefficient)\n    + 두 변수 간 상관관계를 수치로 나타내어 정량화한 지표\n    + 상관계수의 절대값은 선형성의 강도를, 부호는 선형성의 방향성을 나타냄\n    + 변수의 측정 단위의 영향을 받지 않음\n\n<br>\n\n+ 상관계수의 성질\n  + 상관계수 r은 항상 -1에서 +1 사이의 값을 가짐\n  + 절대값이 1에 가까울수록 강한 상관관계를 의미함\n  + r>0이면 양의 상관관계, r<0이면 음의 상관관계, r=0이면 상관관계가 없음을 나타냄\n    + 양의 상관관계 : 한 변수가 증가할 때 다른 변수도 증가\n    + 음의 상관관계 : 한 변수가 증가할 때 다른 변수는 감소\n    + 상관관계 없음 : 한 변수가 증가할 때 다른 변수는 영향을 받지 않음\n\n<br>\n\n![](./images/fig3-7.jpg){width=70%}\n\n<br>\n\n### 8.1.2. (실습) 행복지수 데이터 분석\n+ \\[데이터\\] 캐글에서 제공하는 전세계 행복지수 데이터\n  + 1인당 GDP, 사회적 지지 정도, 건강한 기대수명, 인생 선택의 자유, 기부\n  + \\[실습파일\\] [2020.csv](./data/2020.csv), [2021.csv](./data/2021.csv)\n\n<br>\n\n> **행복지수와 관련된 요인은 무엇일까?**\n\n<br>\n\n::: {#8b1ab22b .cell execution_count=1}\n``` {.python .cell-code}\n## (1) 데이터 확인 및 전처리\n```\n:::\n\n\n::: {#cfae274d .cell execution_count=2}\n``` {.python .cell-code}\n# 라이브러리 불러오기\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n```\n:::\n\n\n::: {#459c07b4 .cell execution_count=3}\n``` {.python .cell-code}\n# 데이터 불러오기\ndf2020 = pd.read_csv('./data/2020.csv', index_col=0)\ndf2021 = pd.read_csv('./data/2021.csv', index_col=0)\n```\n:::\n\n\n::: {#b789d3e3 .cell execution_count=4}\n``` {.python .cell-code}\n# 열 정보\ndf2020.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nCountry name                     object\nHappiness score                 float64\nupperwhisker                    float64\nlowerwhisker                    float64\nGDP per capita                  float64\nSocial support                  float64\nHealthy life expectancy         float64\nFreedom to make life choices    float64\nGenerosity                      float64\nDystopia                        float64\ndtype: object\n```\n:::\n:::\n\n\n::: {#3589f8b8 .cell execution_count=5}\n``` {.python .cell-code}\n# 2020년 데이터 확인\ndf2020.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country name</th>\n      <th>Happiness score</th>\n      <th>upperwhisker</th>\n      <th>lowerwhisker</th>\n      <th>GDP per capita</th>\n      <th>Social support</th>\n      <th>Healthy life expectancy</th>\n      <th>Freedom to make life choices</th>\n      <th>Generosity</th>\n      <th>Dystopia</th>\n    </tr>\n    <tr>\n      <th>Rank</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>Finland</td>\n      <td>7.8087</td>\n      <td>7.869766</td>\n      <td>7.747634</td>\n      <td>10.639267</td>\n      <td>0.954330</td>\n      <td>71.900825</td>\n      <td>0.949172</td>\n      <td>-0.059482</td>\n      <td>2.762835</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Denmark</td>\n      <td>7.6456</td>\n      <td>7.711245</td>\n      <td>7.579955</td>\n      <td>10.774001</td>\n      <td>0.955991</td>\n      <td>72.402504</td>\n      <td>0.951444</td>\n      <td>0.066202</td>\n      <td>2.432741</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Switzerland</td>\n      <td>7.5599</td>\n      <td>7.628528</td>\n      <td>7.491272</td>\n      <td>10.979933</td>\n      <td>0.942847</td>\n      <td>74.102448</td>\n      <td>0.921337</td>\n      <td>0.105911</td>\n      <td>2.350267</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Iceland</td>\n      <td>7.5045</td>\n      <td>7.621347</td>\n      <td>7.387653</td>\n      <td>10.772559</td>\n      <td>0.974670</td>\n      <td>73.000000</td>\n      <td>0.948892</td>\n      <td>0.246944</td>\n      <td>2.460688</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Norway</td>\n      <td>7.4880</td>\n      <td>7.556281</td>\n      <td>7.419719</td>\n      <td>11.087804</td>\n      <td>0.952487</td>\n      <td>73.200783</td>\n      <td>0.955750</td>\n      <td>0.134533</td>\n      <td>2.168266</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#303f576a .cell execution_count=6}\n``` {.python .cell-code}\n# 2021년 데이터 확인\ndf2021.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country name</th>\n      <th>Happiness score</th>\n      <th>upperwhisker</th>\n      <th>lowerwhisker</th>\n      <th>GDP per capita</th>\n      <th>Social support</th>\n      <th>Healthy life expectancy</th>\n      <th>Freedom to make life choices</th>\n      <th>Generosity</th>\n      <th>Dystopia</th>\n    </tr>\n    <tr>\n      <th>Rank</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>Finland</td>\n      <td>7.842</td>\n      <td>7.904</td>\n      <td>7.780</td>\n      <td>10.775</td>\n      <td>0.954</td>\n      <td>72.0</td>\n      <td>0.949</td>\n      <td>-0.098</td>\n      <td>3.253</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Denmark</td>\n      <td>7.620</td>\n      <td>7.687</td>\n      <td>7.552</td>\n      <td>10.933</td>\n      <td>0.954</td>\n      <td>72.7</td>\n      <td>0.946</td>\n      <td>0.030</td>\n      <td>2.868</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Switzerland</td>\n      <td>7.571</td>\n      <td>7.643</td>\n      <td>7.500</td>\n      <td>11.117</td>\n      <td>0.942</td>\n      <td>74.4</td>\n      <td>0.919</td>\n      <td>0.025</td>\n      <td>2.839</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Iceland</td>\n      <td>7.554</td>\n      <td>7.670</td>\n      <td>7.438</td>\n      <td>10.878</td>\n      <td>0.983</td>\n      <td>73.0</td>\n      <td>0.955</td>\n      <td>0.160</td>\n      <td>2.967</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Netherlands</td>\n      <td>7.464</td>\n      <td>7.518</td>\n      <td>7.410</td>\n      <td>10.932</td>\n      <td>0.942</td>\n      <td>72.4</td>\n      <td>0.913</td>\n      <td>0.175</td>\n      <td>2.798</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#6e210c4a .cell execution_count=7}\n``` {.python .cell-code}\n# 데이터 전처리 : 열 삭제\ndf2020.drop(['upperwhisker', 'lowerwhisker', 'Dystopia'], axis=1, inplace=True)\ndf2021.drop(['upperwhisker', 'lowerwhisker', 'Dystopia'], axis=1, inplace=True)\n```\n:::\n\n\n::: {#5e75a403 .cell execution_count=8}\n``` {.python .cell-code}\n# 열 이름 변경 : 공백을 _으로 대체\n#df2020.columns = df2020.columns.str.replace(' ','._')\n#df2021.columns = df2021.columns.str.replace(' ','_')\n```\n:::\n\n\n::: {#f35ec0c0 .cell execution_count=9}\n``` {.python .cell-code}\n# 데이터 전처리 : 열 이름 변경\ndf2020.columns = ['Country', 'Score', 'GDP_per_capita', 'Social_support', 'Life_expectancy', 'Freedom', 'Generosity']\ndf2021.columns = ['Country', 'Score', 'GDP_per_capita', 'Social_support', 'Life_expectancy', 'Freedom', 'Generosity']\n```\n:::\n\n\n<br>\n\n::: {#4d2841b5 .cell execution_count=10}\n``` {.python .cell-code}\n## (2) 데이터 분석 및 시각화\n## (2-1) 행복 점수와 기능의 상관관계\n##       한 국가의 행복지수와 경제적(GDP), 법적 상태(Freedom)는 상관관계가 있는가?\n```\n:::\n\n\n::: {#cbb2fd0f .cell execution_count=11}\n``` {.python .cell-code}\n# 2020년 데이터 전처리\ndf1 = df2020.copy()\ndf1.drop(['Social_support', 'Life_expectancy', 'Generosity'], axis=1, inplace=True)\ndf1.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Score</th>\n      <th>GDP_per_capita</th>\n      <th>Freedom</th>\n    </tr>\n    <tr>\n      <th>Rank</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>Finland</td>\n      <td>7.8087</td>\n      <td>10.639267</td>\n      <td>0.949172</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Denmark</td>\n      <td>7.6456</td>\n      <td>10.774001</td>\n      <td>0.951444</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Switzerland</td>\n      <td>7.5599</td>\n      <td>10.979933</td>\n      <td>0.921337</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Iceland</td>\n      <td>7.5045</td>\n      <td>10.772559</td>\n      <td>0.948892</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Norway</td>\n      <td>7.4880</td>\n      <td>11.087804</td>\n      <td>0.955750</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#4897dbcb .cell execution_count=12}\n``` {.python .cell-code}\n# 산점도 : 2020년 데이터\nsns.pairplot(df1, height=2)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](3_2_regression_files/figure-html/cell-13-output-1.png){width=569 height=568}\n:::\n:::\n\n\n::: {#00e4e8f5 .cell execution_count=13}\n``` {.python .cell-code}\n# 상관계수 : 2020년 데이터\n# 행복지수와 GDP 간 상관계수는 0.78로, 강한 양의 상관관계임\n# 행복지수와 Freedom 간 상관계수는 0.59로, 뚜렷한 양의 상관관계임\ncorr = df1.select_dtypes(include='number').corr()\ncorr['Score'].sort_values(ascending=False)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nScore             1.000000\nGDP_per_capita    0.775374\nFreedom           0.590597\nName: Score, dtype: float64\n```\n:::\n:::\n\n\n::: {#8a7dab81 .cell execution_count=14}\n``` {.python .cell-code}\n# 상관분석 : 2020년 데이터\nplt.figure(figsize=(6, 4))\nsns.heatmap(corr, annot=True, cmap='Blues')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](3_2_regression_files/figure-html/cell-15-output-1.png){width=466 height=342}\n:::\n:::\n\n\n::: {#051a3d39 .cell execution_count=15}\n``` {.python .cell-code}\n# 2021년 데이터 전처리\ndf2 = df2021.copy()\ndf2.drop(['Social_support', 'Life_expectancy', 'Generosity'], axis=1, inplace=True)\ndf2.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Score</th>\n      <th>GDP_per_capita</th>\n      <th>Freedom</th>\n    </tr>\n    <tr>\n      <th>Rank</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>Finland</td>\n      <td>7.842</td>\n      <td>10.775</td>\n      <td>0.949</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Denmark</td>\n      <td>7.620</td>\n      <td>10.933</td>\n      <td>0.946</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Switzerland</td>\n      <td>7.571</td>\n      <td>11.117</td>\n      <td>0.919</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Iceland</td>\n      <td>7.554</td>\n      <td>10.878</td>\n      <td>0.955</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Netherlands</td>\n      <td>7.464</td>\n      <td>10.932</td>\n      <td>0.913</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#e4be81f3 .cell execution_count=16}\n``` {.python .cell-code}\n# 산점도 : 2021년 데이터\nsns.pairplot(df2, height=2, diag_kind='kde')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](3_2_regression_files/figure-html/cell-17-output-1.png){width=569 height=568}\n:::\n:::\n\n\n::: {#8d74e9b1 .cell execution_count=17}\n``` {.python .cell-code}\n# 상관분석 : 2021년 데이터\n# 행복지수와 GDP 간 상관계수는 0.79로, 강한 양의 상관관계임\n# 헹복지수와 Freedom 간 상관계수는 0.61로, 뚜렷한 양의 상관관계임\nplt.figure(figsize=(6, 4))\nsns.heatmap(df2.select_dtypes(include='number').corr(), annot=True, cmap='PuBuGn')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](3_2_regression_files/figure-html/cell-18-output-1.png){width=466 height=342}\n:::\n:::\n\n\n<br>\n\n##### **결과 및 시사점**\n+ 행복지수와 GDP 간 관계는?\n  + 상관계수는 2020년 0.78, 2021년 0.79로, 강한 양의 상관관계로 나타남\n  + 경제 성장은 일반적으로 더 높은 소득과 향상된 생활 수준으로 이어지므로, 국민의 행복 수준도 높아지는 경향이 있음\n  + 따라서 국민의 행복을 보장하기 위해, 국가의 GDP는 주요 우선순위 중 하나로 고려될 필요가 있음\n\n<br>\n\n+ 행복지수와 인생 선택의 자유 간 관계는?\n  + 상관계수는 2020년 0.59, 2021년 0.61로, 뚜렷한 양의 상관관계로 나타남\n  + 자유에 대한 인식은 지역과 문화에 따라 다양하기 때문에 일반화하기는 어려움\n  + 그럼에도 불구하고, 개인이 삶을 선택할 자유를 얼마나 느끼는지는 국민의 행복 수준에 중요한 영향을 미침\n\n<br>\n\n::: {#0158bf88 .cell execution_count=18}\n``` {.python .cell-code}\n## (2-2) 행복 점수와 사회적 상태의 상관관계\n##       한 국가의 행복지수와 사회적 상태(Social.support)는 상관관계가 있는가?\n```\n:::\n\n\n::: {#f35ab355 .cell execution_count=19}\n``` {.python .cell-code}\n# 데이터 전처리\nx1 = df2020[['Generosity', 'Social_support', 'Score']].copy()\nx2 = df2021[['Generosity', 'Social_support', 'Score']].copy()\n```\n:::\n\n\n::: {#8220516c .cell execution_count=20}\n``` {.python .cell-code}\n# 상관분석 : 2020년 데이터\na1 = x1.corr()\nplt.figure(figsize=(6, 4))\nsns.heatmap(a1, annot=True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](3_2_regression_files/figure-html/cell-21-output-1.png){width=466 height=342}\n:::\n:::\n\n\n::: {#20030129 .cell execution_count=21}\n``` {.python .cell-code}\n# 상관분석 : 2021년 데이터\na2 = x2.corr()\nplt.figure(figsize=(6, 4))\nsns.heatmap(a2, annot=True, cmap='GnBu')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](3_2_regression_files/figure-html/cell-22-output-1.png){width=466 height=342}\n:::\n:::\n\n\n<br>\n\n##### **결과 및 시사점**\n+ 행복지수와 사회적 지지 간 관계는?\n  + 상관계수는 2020년 0.77, 2021년 0.76으로, 강한 양의 상관관계로 나타남\n  + 사회적 지지는 가족, 친구, 지인 등과 함께하는 관계에서 느끼는 정서적 지원에 대한 인식을 의미함\n  + 일상 생활에서 가깝게 지내는 사람들과의 관계에서 형성되므로, 사회적 지지는 행복 수준에 중요한 요소임을 알 수 있음\n\n<br>\n\n+ 행복지수와 기부 문화 간 관계는?\n  + 상관계수는 2020년 0.069, 2021년 -0.018로, 상관관계가 거의 없는 것으로 나타남\n  + 따라서 기부 문화가 행복 수준과 직접적인 관련이 거의 없음을 확인할 수 있음\n\n<br>\n\n::: {#04987cc7 .cell execution_count=22}\n``` {.python .cell-code}\n## (2-3) 행복 점수와 전체 변수의 상관관계\n```\n:::\n\n\n::: {#494be71d .cell execution_count=23}\n``` {.python .cell-code}\n# 상관분석 : 2020년 데이터\ncorr = df2020.select_dtypes(include='number').corr()\n\nplt.figure(figsize=(8, 6))\nupp_mat = np.triu(corr)\nsns.heatmap(corr, mask=upp_mat,vmin=-1, vmax=1, annot=True, cmap ='RdYlBu_r', linewidths=4)\nplt.xticks(rotation=45)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](3_2_regression_files/figure-html/cell-24-output-1.png){width=715 height=562}\n:::\n:::\n\n\n::: {#5def97f9 .cell execution_count=24}\n``` {.python .cell-code}\n# 상관분석 : 2021년 데이터\ncorr = df2021.select_dtypes(include='number').corr()\n\nplt.figure(figsize=(8, 6))\nupp_mat = np.triu(corr)\nsns.heatmap(corr, mask=upp_mat, vmin=-1, vmax=1,annot = True, cmap ='PiYG', linewidths=4)\nplt.xticks(rotation=45)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](3_2_regression_files/figure-html/cell-25-output-1.png){width=715 height=562}\n:::\n:::\n\n\n<br>\n\n##### **결과 및 시사점**\n+ 2021년 행복지수에 가장 큰 영향을 미치는 요인은 경제적 여유(GDP, 0.79), 건강(0.77), 사회적 지지(0.76), 선택에 대한 자유도(0.61) 순으로 나타남\n+ 기부 활동과 행복지수는 뚜렷한 관련이 없는 것으로 나타남\n+ 1인당 GDP와 건강한 기대수명은 강한 양의 상관관계(0.86)가 있으므로, 경제적으로 여유로운 사람들이 더 건강하게 사는 경향이 있음을 알 수 있음\n\n<br>\n\n<br>\n\n## 8.2. 단순선형 회귀분석\n+ 회귀(regression)\n  + 지도학습의 한 종류로, 정답(label)이 수치형 변수일 때 사용됨\n  + 하나 이상의 독립변수(x)가 종속변수(y)에 미치는 영향력의 크기를 수학적 관계식(모델)으로 추정하는 통계 기법\n    + 독립변수(independent variable) : 다른 변수의 변화를 야기하는 변수\n    + 종속변수(dependent variable) : 다른 변수의 영향으로 변화하는 변수\n  + 학습된 모델은 새로운 독립변수 값에 대해 종속변수의 값을 예측할 수 있음\n  + 독립변수 개수에 따른 구분\n    + 단순선형 회귀(simple linear regression) : 독립변수가 1개인 경우\n    + 다중선형 회귀(multiple linear regression) : 독립변수가 2개 이상인 경우\n\n<br>\n\n+ 회귀모델 평가지표\n|지표|설명|\n|:---------|:------------------------------|\n|MSE(Mean Squared Error)|- 평균제곱오차로, 작을수록 좋음|\n|RMSE(Root Mean Squared Error)|- MSE의 양의 제곱근으로, 작을수록 좋음<br> -단위가 데이터와 동일하여 해석이 용이함|\n|MAE(Mean Absolute Error)|- 평균절대오차로, 작을수록 좋음 <br>- 이상값에 덜 민감함|\n|$R^2$ (결정계수)|- 모델이 데이터의 변동을 얼마나 잘 설명하는지 나타내는 지표 <br>- 0~1 사이의 값을 가지며, 1에 가까울수록 모델의 설명력이 높음|\n\n<br>\n\n+ 단순선형 회귀분석\n  + 하나의 독립변수가 종속변수에 미치는 영향을 분석하는 통계 기법\n    + 예 : 공부 시간(독립변수)에 따른 시험 성적(종속변수)의 변화\n  + 단순선형 회귀모델\n      $$y = \\beta_0 + \\beta_1x + \\epsilon$$\n    + $\\beta_0$ : 절편(intercept)\n    + $\\beta_1$ : 기울기(slope)\n    + $\\epsilon$ : 오차(error)\n  + 회귀분석의 목적은 주어진 데이터를 가장 잘 설명하는 회귀선을 찾는 것\n    + 일반적으로 오차의 제곱합을 최소화하는 최소제곱추정법(OLS; Ordinary Least Squares)을 사용함\n    $$\\hat{y} = b_0 + b_1x$$\n  + 잔차(residual) : 관측값과 예측값의 차이, $y-\\hat{y}$\n\n<br>\n\n![](./images/fig3-8.jpg)\n\n<br>\n\n::: {#7b0f6a3b .cell execution_count=25}\n``` {.python .cell-code}\n# 한글 깨짐 현상에 대한 해결 방법\nimport matplotlib as mpl\nplt.rc('font', family='Malgun Gothic')\nmpl.rcParams['axes.unicode_minus'] = False\n```\n:::\n\n\n::: {#53094dae .cell execution_count=26}\n``` {.python .cell-code}\n# scikit-learn 설치하기\n#!pip install scikit-learn\n```\n:::\n\n\n::: {#634ddb86 .cell execution_count=27}\n``` {.python .cell-code}\n# scikit-learn의 linear_model 모듈에서 LinearRegression 클래스 불러오기\nfrom sklearn.linear_model import LinearRegression\n```\n:::\n\n\n::: {#d98e9d2a .cell execution_count=28}\n``` {.python .cell-code}\n## 공부 시간(독립변수)에 따른 시험 성적(종속변수)의 변화\n# 데이터프레임 생성\ndata = pd.DataFrame({\n    'study_time': [2, 4, 6, 8, 10],\n    'score': [81, 93, 90, 97, 100]\n})\n\n# 산점도 : 두 변수 간 상관관계 확인\nplt.figure(figsize=(5, 3))\nplt.scatter(data['study_time'], data['score'])\nplt.xlabel('Study Time (hours)')\nplt.ylabel('Score')\nplt.show()\n\n# 독립변수, 종속변수 분리\n# scikit-Learn에서 입력 데이터(feature)를 2차원 배열로 요구함\nX = data[['study_time']]\ny = data['score']\n\n# 선형 회귀모형 객체 생성 및 학습\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# 7시간 공부했을 때, 시험 점수 예측\nnewdata = pd.DataFrame({'study_time': [7]})\npredicted_score = model.predict(newdata)\nprint(predicted_score)\n```\n\n::: {.cell-output .cell-output-display}\n![](3_2_regression_files/figure-html/cell-29-output-1.png){width=441 height=282}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[94.3]\n```\n:::\n:::\n\n\n<br>\n\n## 8.3. (실습) 날씨 데이터 분석\n+ \\[데이터\\] 기상자료개방포털에서 제공하는 서울특별시의 기상 관측 데이터\n  + 2010년 1월 ~ 2020년 12월\n  + 날짜, 지점, 평균기온(℃), 최저기온(℃), 최고기온(℃)\n  + \\[실습파일\\] [(2010-2020)_weather.csv](./data/(2010-2020)_weather.csv)\n\n<br>\n\n> **2021년 8월 15일의 평균기온을 예측하면?**\n\n<br>\n\n::: {#bbfd9f17 .cell execution_count=29}\n``` {.python .cell-code}\n## (1) 데이터 확인 및 전처리\n```\n:::\n\n\n::: {#80b7eafd .cell execution_count=30}\n``` {.python .cell-code}\n# 데이터 불러오기\nseoul = pd.read_csv('./data/(2010-2020)_weather.csv', encoding='cp949')\nseoul.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>날짜</th>\n      <th>지점</th>\n      <th>평균기온(℃)</th>\n      <th>최저기온(℃)</th>\n      <th>최고기온(℃)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2010-01-01</td>\n      <td>108</td>\n      <td>-7.6</td>\n      <td>-12.7</td>\n      <td>-3.6</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2010-01-02</td>\n      <td>108</td>\n      <td>-3.6</td>\n      <td>-7.4</td>\n      <td>0.2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2010-01-03</td>\n      <td>108</td>\n      <td>-6.8</td>\n      <td>-10.5</td>\n      <td>-3.2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2010-01-04</td>\n      <td>108</td>\n      <td>-5.9</td>\n      <td>-8.0</td>\n      <td>-3.4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2010-01-05</td>\n      <td>108</td>\n      <td>-9.9</td>\n      <td>-12.3</td>\n      <td>-7.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#db4e26ef .cell execution_count=31}\n``` {.python .cell-code}\n# 데이터 정보\nseoul.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 4018 entries, 0 to 4017\nData columns (total 5 columns):\n #   Column   Non-Null Count  Dtype  \n---  ------   --------------  -----  \n 0   날짜       4018 non-null   object \n 1   지점       4018 non-null   int64  \n 2   평균기온(℃)  4018 non-null   float64\n 3   최저기온(℃)  4018 non-null   float64\n 4   최고기온(℃)  4017 non-null   float64\ndtypes: float64(3), int64(1), object(1)\nmemory usage: 157.1+ KB\n```\n:::\n:::\n\n\n::: {#7f2533a3 .cell execution_count=32}\n``` {.python .cell-code}\n# 데이터 전처리 : 열 삭제\nseoul.drop('지점', axis=1, inplace=True)\n```\n:::\n\n\n::: {#9dd043a4 .cell execution_count=33}\n``` {.python .cell-code}\n# 데이터 전처리 : 열 이름 변경\nseoul.columns = ['날짜', '평균기온', '최저기온', '최고기온']\n```\n:::\n\n\n::: {#bee2aa9c .cell execution_count=34}\n``` {.python .cell-code}\n# 데이터 전처리 : 결측값 확인\nseoul.isna().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\n날짜      0\n평균기온    0\n최저기온    0\n최고기온    1\ndtype: int64\n```\n:::\n:::\n\n\n::: {#99040a89 .cell execution_count=35}\n``` {.python .cell-code}\n# 데이터 전처리 : 결측값이 포함된 행 삭제\nseoul.dropna(axis=0, inplace=True)\n```\n:::\n\n\n::: {#4f647559 .cell execution_count=36}\n``` {.python .cell-code}\n# 데이터 전처리 : 날짜 변수를 datetime 형식으로 변환\nseoul['날짜'] = pd.to_datetime(seoul['날짜'])\n```\n:::\n\n\n::: {#7302efc1 .cell execution_count=37}\n``` {.python .cell-code}\n# 데이터 전처리 : 새로운 변수(연도, 월, 일) 생성\nseoul['연도'] = seoul['날짜'].dt.year\nseoul['월']=seoul['날짜'].dt.month\nseoul['일']=seoul['날짜'].dt.day\nseoul.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>날짜</th>\n      <th>평균기온</th>\n      <th>최저기온</th>\n      <th>최고기온</th>\n      <th>연도</th>\n      <th>월</th>\n      <th>일</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2010-01-01</td>\n      <td>-7.6</td>\n      <td>-12.7</td>\n      <td>-3.6</td>\n      <td>2010</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2010-01-02</td>\n      <td>-3.6</td>\n      <td>-7.4</td>\n      <td>0.2</td>\n      <td>2010</td>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2010-01-03</td>\n      <td>-6.8</td>\n      <td>-10.5</td>\n      <td>-3.2</td>\n      <td>2010</td>\n      <td>1</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2010-01-04</td>\n      <td>-5.9</td>\n      <td>-8.0</td>\n      <td>-3.4</td>\n      <td>2010</td>\n      <td>1</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2010-01-05</td>\n      <td>-9.9</td>\n      <td>-12.3</td>\n      <td>-7.0</td>\n      <td>2010</td>\n      <td>1</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#63dffad0 .cell execution_count=38}\n``` {.python .cell-code}\n# 데이터 전처리 : 8월 15일 데이터 선택\nconditions = (seoul['월']==8) & (seoul['일']==15)\nseoul0815 = seoul[conditions]\nseoul0815\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>날짜</th>\n      <th>평균기온</th>\n      <th>최저기온</th>\n      <th>최고기온</th>\n      <th>연도</th>\n      <th>월</th>\n      <th>일</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>226</th>\n      <td>2010-08-15</td>\n      <td>26.6</td>\n      <td>24.6</td>\n      <td>30.2</td>\n      <td>2010</td>\n      <td>8</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>591</th>\n      <td>2011-08-15</td>\n      <td>24.5</td>\n      <td>22.9</td>\n      <td>26.9</td>\n      <td>2011</td>\n      <td>8</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>957</th>\n      <td>2012-08-15</td>\n      <td>23.7</td>\n      <td>22.4</td>\n      <td>27.1</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>1322</th>\n      <td>2013-08-15</td>\n      <td>28.7</td>\n      <td>25.8</td>\n      <td>32.4</td>\n      <td>2013</td>\n      <td>8</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>1687</th>\n      <td>2014-08-15</td>\n      <td>24.9</td>\n      <td>20.9</td>\n      <td>29.6</td>\n      <td>2014</td>\n      <td>8</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>2052</th>\n      <td>2015-08-15</td>\n      <td>27.1</td>\n      <td>23.1</td>\n      <td>30.8</td>\n      <td>2015</td>\n      <td>8</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>2418</th>\n      <td>2016-08-15</td>\n      <td>29.1</td>\n      <td>25.8</td>\n      <td>34.0</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>2783</th>\n      <td>2017-08-15</td>\n      <td>21.9</td>\n      <td>20.8</td>\n      <td>24.0</td>\n      <td>2017</td>\n      <td>8</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>3148</th>\n      <td>2018-08-15</td>\n      <td>31.7</td>\n      <td>28.3</td>\n      <td>38.0</td>\n      <td>2018</td>\n      <td>8</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>3513</th>\n      <td>2019-08-15</td>\n      <td>25.9</td>\n      <td>23.9</td>\n      <td>28.6</td>\n      <td>2019</td>\n      <td>8</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>3879</th>\n      <td>2020-08-15</td>\n      <td>26.1</td>\n      <td>25.0</td>\n      <td>27.0</td>\n      <td>2020</td>\n      <td>8</td>\n      <td>15</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<br>\n\n::: {#cdaaf277 .cell execution_count=39}\n``` {.python .cell-code}\n## (2) 데이터 분석 및 시각화\n```\n:::\n\n\n::: {#d42d73a6 .cell execution_count=40}\n``` {.python .cell-code}\n# 요약 통계량\nseoul.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>날짜</th>\n      <th>평균기온</th>\n      <th>최저기온</th>\n      <th>최고기온</th>\n      <th>연도</th>\n      <th>월</th>\n      <th>일</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>4017</td>\n      <td>4017.000000</td>\n      <td>4017.000000</td>\n      <td>4017.000000</td>\n      <td>4017.000000</td>\n      <td>4017.000000</td>\n      <td>4017.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>2015-07-02 07:01:34.100074752</td>\n      <td>12.965596</td>\n      <td>8.991063</td>\n      <td>17.699627</td>\n      <td>2015.000249</td>\n      <td>6.521782</td>\n      <td>15.731392</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>2010-01-01 00:00:00</td>\n      <td>-14.800000</td>\n      <td>-18.000000</td>\n      <td>-10.700000</td>\n      <td>2010.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2012-10-01 00:00:00</td>\n      <td>3.700000</td>\n      <td>-0.300000</td>\n      <td>8.200000</td>\n      <td>2012.000000</td>\n      <td>4.000000</td>\n      <td>8.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>2015-07-02 00:00:00</td>\n      <td>14.300000</td>\n      <td>9.800000</td>\n      <td>19.600000</td>\n      <td>2015.000000</td>\n      <td>7.000000</td>\n      <td>16.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>2018-04-02 00:00:00</td>\n      <td>22.800000</td>\n      <td>18.900000</td>\n      <td>27.400000</td>\n      <td>2018.000000</td>\n      <td>10.000000</td>\n      <td>23.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>2020-12-31 00:00:00</td>\n      <td>33.700000</td>\n      <td>30.300000</td>\n      <td>39.600000</td>\n      <td>2020.000000</td>\n      <td>12.000000</td>\n      <td>31.000000</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>NaN</td>\n      <td>10.805008</td>\n      <td>10.934039</td>\n      <td>10.976719</td>\n      <td>3.163104</td>\n      <td>3.449203</td>\n      <td>8.802435</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#0afa220d .cell execution_count=41}\n``` {.python .cell-code}\n# 산점도 : 연도에 따른 평균기온 변화\n# 독립변수, 종속변수 분리\n# scikit-learn에서 입력 데이터(feature)를 2차원 배열로 요구함\nX = seoul0815[['연도']]\ny = seoul0815['평균기온']\n\nfig = plt.figure(figsize=(5, 3))\nplt.scatter(X, y)\nplt.xlabel('연도')\nplt.ylabel('평균기온')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](3_2_regression_files/figure-html/cell-42-output-1.png){width=434 height=283}\n:::\n:::\n\n\n::: {#e8b04946 .cell execution_count=42}\n``` {.python .cell-code}\n# 상관계수 : 연도와 평균기온의 상관관계\n# 연도와 평균기온은 약한 양의 상관관계로 나타나, 단순선형 회귀모형을 적합할 수 있음\nseoul0815[['연도', '평균기온']].corr()\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>연도</th>\n      <th>평균기온</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>연도</th>\n      <td>1.000000</td>\n      <td>0.194953</td>\n    </tr>\n    <tr>\n      <th>평균기온</th>\n      <td>0.194953</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#732909e4 .cell execution_count=43}\n``` {.python .cell-code}\n# 단순선형 회귀분석 : 2021년 8월 15일 평균기온 예측\n# 선형 회귀모델 생성 및 학습\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# 회귀식의 절편 및 기울기\nintercept = model.intercept_\nslope = model.coef_\nprint(f'회귀식: hat(y) = {model.intercept_:.2f} + {model.coef_[0]:.2f}*x')\n\n# 결정계수\nR2 = model.score(X, y)\nprint(f'결정계수 : {R2:.3f}')\n\n# 2021년일 때, 평균기온 예측\nnewdata = pd.DataFrame({'연도': [2022]})\ny_pred = model.predict(newdata)\nprint(f'2021년 8월 15일 평균기온 예측값 : {y_pred[0]:.2f}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n회귀식: hat(y) = -297.85 + 0.16*x\n결정계수 : 0.038\n2021년 8월 15일 평균기온 예측값 : 27.51\n```\n:::\n:::\n\n\n::: {#12aae2cf .cell execution_count=44}\n``` {.python .cell-code}\n# 산점도와 단순선형 회귀선\nfig = plt.figure(figsize=(5, 3))   \nsns.regplot(x='연도', y='평균기온', data=seoul0815)\nplt.grid()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](3_2_regression_files/figure-html/cell-45-output-1.png){width=434 height=283}\n:::\n:::\n\n\n<br>\n\n##### **결과 및 시사점**\n+ 연도와 평균기온은 약한 양의 상관관계(r=0.195)로 나타나, 단순선형 회귀모형을 적합할 수 있음\n+ 독립변수는 연도, 종속변수는 평균기온으로 단순선형 회귀분석을 실시한 결과, 모형의 설명력은 3.8%로 비교적 낮게 나타남\n+ 적합된 회귀식 : $\\hat{y} = -297.85 + 0.16*x$\n  + 연도가 1년 증가할수록 8월 15일의 평균기온은 약 0.16℃ 상승하는 것으로 추정됨\n+ 따라서 2021년 8월 15일의 평균기온은 27.51℃로 예측됨\n\n<br>\n\n<br>\n\n## 8.4. 다중선형 회귀분석\n+ 다중선형 회귀분석\n  + 두 개 이상의 독립변수가 종속변수에 미치는 영향을 분석하는 통계 기법\n    + 예: 공부 시간, 수면 시간, 강의 출석률(독립변수들)에 따른 시험 성적(종속변수)의 변화\n  + 다중선형 회귀모델\n    $$y = \\beta_0 + \\beta_1x_1 + \\beta_2x_2 + \\cdots + \\beta_p x_p + \\epsilon$$\n    + $\\beta_0$ : 절편(intercept)  \n    + $\\beta_1, \\beta_2, \\dots, \\beta_p$ : 각 독립변수의 기울기(slope)\n    + $\\epsilon$ : 오차(error)\n\n<br>\n\n## 8.5. (실습) 캘리포니아 주택 가격 분석\n+ \\[데이터\\] scikit-learn에서 제공하는 캘리포니아 주택 가격 데이터\n  + 1990년대 캘리포니아 지역의 주택 가격에 대한 데이터\n  + 총 20,640개의 관측값과 8개의 독립변수(feature), 1개의 종속변수(target)으로 구성됨\n  + `as_frame=True` 옵션을 사용하면 독립변수와 종속변수를 DataFrame 형태로 불러올 수 있음\n  + `as_frame=False` 옵션(기본값)을 사용하면 독립변수와 종속변수를 각각 넘파이 배열 형태로 별도로 제공함\n\n<br>\n\n|변수|설명|\n|:------|:------------------------------|\n|MedInc|지역 중위 소득 (10,000 USD)|\n|HouseAge|주택 연식 (건축 후 경과된 연도 수)|\n|AveRooms|가구당 평균 방 개수|\n|AveBedrms|가구당 평균 침실 개수|\n|Population|지역 내 인구 수|\n|AveOccup|가구당 평균 거주 인원 수|\n|Latitude|위도|\n|Longitude|경도|\n|MedHouseVal|주택 중위 가격 (100,000 USD)|\n\n<br>\n\n::: {#2696070e .cell execution_count=45}\n``` {.python .cell-code}\n## (1) 데이터 확인 및 전처리\n```\n:::\n\n\n::: {#699f3fae .cell execution_count=46}\n``` {.python .cell-code}\n# 데이터 불러오기\nfrom sklearn.datasets import fetch_california_housing\ndata = fetch_california_housing(as_frame=True)\ndf = data.frame\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MedInc</th>\n      <th>HouseAge</th>\n      <th>AveRooms</th>\n      <th>AveBedrms</th>\n      <th>Population</th>\n      <th>AveOccup</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n      <th>MedHouseVal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>8.3252</td>\n      <td>41.0</td>\n      <td>6.984127</td>\n      <td>1.023810</td>\n      <td>322.0</td>\n      <td>2.555556</td>\n      <td>37.88</td>\n      <td>-122.23</td>\n      <td>4.526</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>8.3014</td>\n      <td>21.0</td>\n      <td>6.238137</td>\n      <td>0.971880</td>\n      <td>2401.0</td>\n      <td>2.109842</td>\n      <td>37.86</td>\n      <td>-122.22</td>\n      <td>3.585</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>7.2574</td>\n      <td>52.0</td>\n      <td>8.288136</td>\n      <td>1.073446</td>\n      <td>496.0</td>\n      <td>2.802260</td>\n      <td>37.85</td>\n      <td>-122.24</td>\n      <td>3.521</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>5.6431</td>\n      <td>52.0</td>\n      <td>5.817352</td>\n      <td>1.073059</td>\n      <td>558.0</td>\n      <td>2.547945</td>\n      <td>37.85</td>\n      <td>-122.25</td>\n      <td>3.413</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3.8462</td>\n      <td>52.0</td>\n      <td>6.281853</td>\n      <td>1.081081</td>\n      <td>565.0</td>\n      <td>2.181467</td>\n      <td>37.85</td>\n      <td>-122.25</td>\n      <td>3.422</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#f4defe07 .cell execution_count=47}\n``` {.python .cell-code}\n# 데이터 정보\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 20640 entries, 0 to 20639\nData columns (total 9 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   MedInc       20640 non-null  float64\n 1   HouseAge     20640 non-null  float64\n 2   AveRooms     20640 non-null  float64\n 3   AveBedrms    20640 non-null  float64\n 4   Population   20640 non-null  float64\n 5   AveOccup     20640 non-null  float64\n 6   Latitude     20640 non-null  float64\n 7   Longitude    20640 non-null  float64\n 8   MedHouseVal  20640 non-null  float64\ndtypes: float64(9)\nmemory usage: 1.4 MB\n```\n:::\n:::\n\n\n::: {#ad8ce467 .cell execution_count=48}\n``` {.python .cell-code}\n# 데이터 전처리 : 결측값 확인\ndf.isna().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=48}\n```\nMedInc         0\nHouseAge       0\nAveRooms       0\nAveBedrms      0\nPopulation     0\nAveOccup       0\nLatitude       0\nLongitude      0\nMedHouseVal    0\ndtype: int64\n```\n:::\n:::\n\n\n::: {#090c8d2e .cell execution_count=49}\n``` {.python .cell-code}\n# 데이터 전처리 : 훈련 데이터와 평가 데이터로 분할 (7:3 비율)\ncalifornia = fetch_california_housing()\nX = california.data\ny = california.target\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n```\n:::\n\n\n<br>\n\n::: {#5d253d32 .cell execution_count=50}\n``` {.python .cell-code}\n## (2) 데이터 분석 및 시각화\n```\n:::\n\n\n::: {#29bc6240 .cell execution_count=51}\n``` {.python .cell-code}\n# 요약 통계량 확인\ndf_train = pd.DataFrame(data=X_train, columns=california.feature_names)\ndf_train['MedHouseVal'] = y_train\ndf_train.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MedInc</th>\n      <th>HouseAge</th>\n      <th>AveRooms</th>\n      <th>AveBedrms</th>\n      <th>Population</th>\n      <th>AveOccup</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n      <th>MedHouseVal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>14448.000000</td>\n      <td>14448.000000</td>\n      <td>14448.000000</td>\n      <td>14448.000000</td>\n      <td>14448.000000</td>\n      <td>14448.000000</td>\n      <td>14448.000000</td>\n      <td>14448.000000</td>\n      <td>14448.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>3.876892</td>\n      <td>28.575374</td>\n      <td>5.438125</td>\n      <td>1.098033</td>\n      <td>1427.927326</td>\n      <td>3.119236</td>\n      <td>35.650669</td>\n      <td>-119.584102</td>\n      <td>2.069240</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.904908</td>\n      <td>12.613634</td>\n      <td>2.453569</td>\n      <td>0.447498</td>\n      <td>1140.225190</td>\n      <td>12.373636</td>\n      <td>2.135742</td>\n      <td>2.002930</td>\n      <td>1.157492</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.499900</td>\n      <td>1.000000</td>\n      <td>0.888889</td>\n      <td>0.333333</td>\n      <td>3.000000</td>\n      <td>0.692308</td>\n      <td>32.550000</td>\n      <td>-124.350000</td>\n      <td>0.149990</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2.567225</td>\n      <td>18.000000</td>\n      <td>4.448928</td>\n      <td>1.006783</td>\n      <td>791.000000</td>\n      <td>2.430380</td>\n      <td>33.940000</td>\n      <td>-121.800000</td>\n      <td>1.193000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>3.539100</td>\n      <td>29.000000</td>\n      <td>5.232422</td>\n      <td>1.049492</td>\n      <td>1168.000000</td>\n      <td>2.817147</td>\n      <td>34.270000</td>\n      <td>-118.510000</td>\n      <td>1.793000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>4.758075</td>\n      <td>37.000000</td>\n      <td>6.060692</td>\n      <td>1.100328</td>\n      <td>1727.000000</td>\n      <td>3.279135</td>\n      <td>37.720000</td>\n      <td>-118.010000</td>\n      <td>2.646000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>15.000100</td>\n      <td>52.000000</td>\n      <td>141.909091</td>\n      <td>25.636364</td>\n      <td>35682.000000</td>\n      <td>1243.333333</td>\n      <td>41.950000</td>\n      <td>-114.310000</td>\n      <td>5.000010</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#3e45234f .cell execution_count=52}\n``` {.python .cell-code}\n# 산점도\nsns.pairplot(df_train, diag_kind='kde')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](3_2_regression_files/figure-html/cell-53-output-1.png){width=2123 height=2123}\n:::\n:::\n\n\n::: {#0d819534 .cell execution_count=53}\n``` {.python .cell-code}\n# 상관분석\ncorr_train = df_train.corr()\nupp_mat = np.triu(corr_train)\n\nplt.figure(figsize=(10, 8))\nsns.heatmap(corr_train, annot=True, mask=upp_mat, cmap='BrBG', vmin=-1, vmax=1)\nplt.title('Correlation Matrix')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](3_2_regression_files/figure-html/cell-54-output-1.png){width=814 height=723}\n:::\n:::\n\n\n::: {#f6da600e .cell execution_count=54}\n``` {.python .cell-code}\n# 상관관계가 강한 독립변수 선택\n# scikit-learn에서 입력 데이터(feature)를 2차원 배열로 요구함\nfeatures = ['MedInc', 'HouseAge', 'AveRooms', 'Latitude']\ntarget = 'MedHouseVal'\n\nX_train = df_train[features]\ny_train = df_train[target]\n```\n:::\n\n\n::: {#17cc8c87 .cell execution_count=55}\n``` {.python .cell-code}\n# 평가 데이터에서도 훈련 데이터에서 사용한 독립변수만 선택\ndf_test = pd.DataFrame(data=X_test, columns=california.feature_names)\ndf_test['MedHouseVal'] = y_test\nX_test = df_test[features]\n```\n:::\n\n\n::: {#6c37ab1d .cell execution_count=56}\n``` {.python .cell-code}\n# 선형 회귀모델 생성 및 학습\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# 회귀모델 평가 : 결정계수, MSE\nfrom sklearn.metrics import mean_squared_error, r2_score\ny_pred = model.predict(X_test)\nR2 = r2_score(y_test, y_pred)\nRMSE = np.sqrt(mean_squared_error(y_test, y_pred))\n\nprint(f\"결정계수 : {R2:.3f}\")\nprint(f\"RMSE : {RMSE:.3f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n결정계수 : 0.520\nRMSE : 0.794\n```\n:::\n:::\n\n\n::: {#9e809e65 .cell execution_count=57}\n``` {.python .cell-code}\n# 회귀계수\ndf_coef = pd.DataFrame({'Feature': features, 'Coefficient': model.coef_})\nprint(df_coef)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Feature  Coefficient\n0    MedInc     0.435658\n1  HouseAge     0.016937\n2  AveRooms    -0.019505\n3  Latitude    -0.045071\n```\n:::\n:::\n\n\n::: {#044ebe1b .cell execution_count=58}\n``` {.python .cell-code}\n# statsmodels 라이브러리 설치\n#!pip install statsmodels\n```\n:::\n\n\n::: {#145ccfe9 .cell execution_count=59}\n``` {.python .cell-code}\n# [참고] 회귀계수의 유의성\nimport statsmodels.api as sm\n\nX_train_const = sm.add_constant(X_train)\nols_model = sm.OLS(y_train, X_train_const).fit()\nprint(ols_model.summary())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:            MedHouseVal   R-squared:                       0.519\nModel:                            OLS   Adj. R-squared:                  0.518\nMethod:                 Least Squares   F-statistic:                     3890.\nDate:                Thu, 24 Jul 2025   Prob (F-statistic):               0.00\nTime:                        02:36:22   Log-Likelihood:                -17332.\nNo. Observations:               14448   AIC:                         3.467e+04\nDf Residuals:                   14443   BIC:                         3.471e+04\nDf Model:                           4                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P>|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nconst          1.6091      0.115     13.957      0.000       1.383       1.835\nMedInc         0.4357      0.004    116.405      0.000       0.428       0.443\nHouseAge       0.0169      0.001     31.487      0.000       0.016       0.018\nAveRooms      -0.0195      0.003     -6.652      0.000      -0.025      -0.014\nLatitude      -0.0451      0.003    -14.213      0.000      -0.051      -0.039\n==============================================================================\nOmnibus:                     3079.717   Durbin-Watson:                   1.979\nProb(Omnibus):                  0.000   Jarque-Bera (JB):             8182.373\nSkew:                           1.148   Prob(JB):                         0.00\nKurtosis:                       5.884   Cond. No.                         809.\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n```\n:::\n:::\n\n\n<br>\n\n##### **결과 및 시사점**\n+ 결정계수 $R^2$은 52.0%로 나타남\n+ RMSE는 0.630으로, 주택 중위 가격의 실제값과 예측값이 평균적으로 약 6만 달러 차이가 있다는 것을 의미함\n+ 훈련 데이터에서 주택 중위 가격의 평균은 약 20만 달러인 점을 고려하면, 모델의 평균 오차는 약 30% 수준임을 알 수 있음\n+ 따라서 평균 오차가 비교적 큰 편이므로, 모델 성능 개선이 필요한 것으로 판단됨\n+ 회귀계수를 살펴보면 지역 중위 소득, 주택 연식이 증가할수록 주택 중위 가격은 높아지며, 가구당 평균 거주 인원 수, 위도가 증가할수록 주택 중위가격은 낮아지는 것으로 나타남\n\n",
    "supporting": [
      "3_2_regression_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}