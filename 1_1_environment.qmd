---
jupyter: python3
---

<h1>1. Python 개발 환경</h1>

## 1.1. Python 소개
+ **컴퓨터 프로그램과 프로그래밍 언어**
  + 컴퓨터 프로그램 (computer program) : 컴퓨터로 문제를 해결하기 위해 작성하는 명령어의 모음
  + 프로그래밍 언어(programming language)
    + 컴퓨터에 어떤 동작을 수행하도록 지시하는 언어
    + 프로그래밍 언어를 사용하여 프로그램을 논리적으로 작성하는 작업을 코딩(coding)이라 함

<br>

+ **Python**
  + 1991년 귀도 반 로섬(Guido van Rossum)이 개발한 프로그래밍 언어
  + 빅데이터 분석과 인공지능 분야에서 가장 널리 사용되고 있음
  + 문법이 쉽고 간결하여 프로그래밍을 처음 접하는 사람이 배우기 적합함

<br>

+ **Python 특징**
  + 플랫폼 독립적인 언어 : 컴퓨터 운영체제나 하드웨어의 종류에 관계없이 사용할 수 있음
  + 인터프리터 언어 : 소스코드 자체가 바로 실행되어 간편하게 사용할 수 있음(속도는 느림)
  + 동적 타이핑 언어
    + 프로그램의 실행 시점에서 각 프로그램 변수의 타입(type)을 결정하는 언어
    + 인터프리터 언어이므로 프로그램의 실행 시점에 변수들의 메모리 공간을 자유롭게 할당받을 수 있음
  + 객체 지향 언어
    + 프로그램이 해결해야 할 문제의 구성요소를 요소별로 정의한 다음, 각 요소의 기능(method)과 정보(attribute)를 프로그래밍한 다음 요소들을 결합하는 방식으로 프로그램을 작성함
    + 이때 각 요소를 객체(object)라고 하며, 한 번 만들어진 객체는 재사용(reusability)할 수 있음

<br>

<br>

## 1.2. Python 설치
### 1.2.1. Jupyter Lab
+ Jupyter Notebook
  + 가장 많이 사용되는 Python IDE 중 하나로, 웹 브라우저에서 실행되는 대화형 개발 도구
  + 코드 작성과 실행을 한 화면에서 쉽게 수행할 수 있으며, 텍스트(Markdown), 수식(LaTeX), 그래프(Matplotlib) 등을 함께 포함할 수 있음
  + 실행 결과가 셀 단위로 저장되어, 데이터 분석 과정을 논리적인 흐름으로 문서화하여 공유하기 용이함
  + 특히 데이터 과학, 머신러닝, 교육, 연구 분야에서 많이 활용됨

<br>

+ Jupyter Lab
  + Jupyter Notebook을 확장한 차세대 인터페이스로, 더욱 유연하고 강력한 기능을 제공하는 개발 환경
  + 탭(tab) 기반 인터페이스를 지원하여 여러 개의 노트북, 터미널, 텍스트 파일, 콘솔 등을 동시에 열고 작업할 수 있음
  + 코드 편집, 데이터 분석, 시각화 등 데이터 과학 및 머신러닝 작업에 최적화된 다양한 편의 기능이 포함됨
  + 파일 브라우저, 터미널, Markdown 편집기, 확장 플러그인 지원 등으로 보다 통합적인 워크플로우를 제공함
  + Jupyter Notebook과 호환되며, 확장성을 고려하여 설계되어 다양한 플로그인 추가가 가능함

<br>

+ 가상 환경(virtual environment)
  + 독립적인 작업 공간을 제공하여, 하나의 컴퓨터에서 여러 프로젝트를 각각의 독립된 환경으로 격리하여 실행할 수 있음
  + 하나의 시스템에서 여러 버전의 Python, 라이브러리 등을 설치하고, 프로젝트마다 서로 다른 버전의 의존성을 관리할 수 있음
  + 충돌 방지 및 의존성 관리에 유용하며, 특정 프로젝트에 필요한 패키지나 라이브러리만 설치하여 다른 프로젝트에 영향을 주지 않음
  + 프로젝트 간의 의존성 충돌을 피하고, 재현 가능한 환경을 제공하여 코드의 안정성을 높이고 협업을 용이하게 함

<br>

+ Jupyter Lab 실행을 위한 환경 설정
  1. [Anaconda3](https://www.anaconda.com/download) 설치
  2. Anaconda Prompt 실행
  3. 가상 환경 생성 : `conda create -n myenv python=3.11`
  4. 가상 환경 리스트 조회 : `conda info --envs`
  5. **가상 환경 접속(활성화) : `conda activate myenv`**
  6. (가상 환경에서) Jupyter Lab 설치 : `conda install -c conda-forge jupyterlab`
  7. **Jupyter Lab 실행 : `jupyter lab`**

<br>

### 1.2.2. Google Colab
+ Google Colab
  + 구글에서 제공하는 클라우드 기반의 Jupyter Notebook 개발 환경으로, 웹 브라우저에서 Python 코드 작성 및 실행이 가능함
  + 별도의 설치 없이 바로 사용할 수 있으며, 구글 드라이브와 연동하여 작성한 파일을 클라우드에 저장하고 쉽게 관리할 수 있음
  + 다양한 라이브러리(Numpy, Pandas, Matplotlib 등)가 기본적으로 설치되어 있음
  + GPU, TPU 지원을 통해 대규모 데이터 처리와 딥러닝 모델 학습에 유리함
  + 협업 기능을 제공하여, 여러 사람이 동시에 실시간으로 작업하고 프로그램을 공유할 수 있음

<br>

## 1.3. 문서화 및 공유
### 1.3.1. Markdown 문법
+ Markdown
  + 일반 텍스트 기반의 경량 마크업 언어(markup language)
  + 특수 기호와 문자를 이용한 간단한 문법으로 웹 콘텐츠를 빠르게 작성할 수 있음
  + 일반 마크업 언어에 비해 문법이 쉽고 간단하며 직관적임
  + \[참고\] 마크업 언어 : 태그(tag) 등을 이용하여 문서나 데이터의 구조를 명시하는 언어의 일종

<br>

+ 제목(Header)
```
# 제목 1
## 제목 2
### 제목 3
#### 제목 4
##### 제목 5
###### 제목 6
```

<br>

+ 인용(Quote)
```
> 첫번째 인용구입니다.
>> 두번째 인용구입니다.
>>> 세번째 인용구입니다.
>>>> 네번째 인용구입니다.
```

<br>

+ 목록(List)
```
1. 순서가 있는 첫 번째 목록
2. 순서가 있는 두 번째 목록
3. 순서가 있는 세 번째 목록
```

```
* 순서가 없는 첫 번째 목록
+ 순서가 없는 두 번째 목록
- 순서가 없는 세 번째 목록
```

<br>

+ 수평선(Line)
```
---
***
```

<br>

+ 강조(Emphasis)

```
*기울어진 글씨*
_기울어진 글씨_
**굵은 글씨**
__굵은 글씨__
~~취소선 글씨~~
```

<br>

### 1.3.2. Quarto 프로젝트 생성
+ Quarto
  + 웹사이트, 문서, 슬라이드, 대시보드 등을 제작할 수 있는 통합 문서 작성 도구
  + Python, R, Julia 등 다양한 언어를 지원하며, 실행과 동시에 문서화가 가능함
  + HTML, PDF, MS Word, ePub 등 다양한 형식으로 변환하여 출력할 수 있음
  + Git을 통한 버전 관리, Git Pages와의 연계를 통해 문서를 손쉽게 공유할 수 있음

<br>

+ Quarto 프로젝트 생성
  1. Quarto 설치
     + [Quarto 다운로드](https://quarto.org/)
     + Anaconda Prompt에서 설치 확인 : `quarto --version`
  2. Quarto 프로젝트 생성
     + Anaconda Prompt에서 Quarto 프로젝트를 생성할 폴더로 이동 : `cd "C:\Users\user"`
     + Quarto 프로젝트 생성 : `quarto create-project ml-project --type website`
  3. Quarto 프로젝트 작성
     + `_quarto.yml` 수정
       + [HTML Theming](https://quarto.org/docs/output-formats/html-themes.html)
     + Jupyter Notebook 작성 : `myproject.ipynb`
     + .ipynb 파일을 .qmd 파일로 변환
       + Anaconda Prompt에서 Quarto 프로젝트 폴더로 이동 : `cd ml-project`
       + .qmd 파일로 변환(선택) : `quarto convert myproject.ipynb -o myproject.qmd`
       + HTML 파일 생성 : `quarto render`
       + 웹사이트 미리보기 : `quarto preview`

<br>

+ `_quarto.yml` 파일
```yml
project:
  type: website
  output-dir: docs

website:
  title: "R&E 활동"
  navbar:
    left:
      - href: myproject.qmd
        text: Project

format:
  html:
    theme:
      - cerulean
    css: styles.css
    toc: true
```

<br>

### 1.3.3. Git Pages 배포
+ Git Pages
  + GitHub에서 HTML 문서를 무료로 웹사이트 형태로 배포할 수 있는 서비스
  + 설정이 간단하며, Git과 통합되어 버전 관리와 팀 작업에 효율적임

<br>

+ Git Pages 배포
  1. GitHub 계정 및 저장소(repository) 생성
  2. Git 설치
     + [Git 다운로드](https://gitforwindows.org/)
     + Anaconda Prompt에서 설치 확인 : `git --version`
  3. Git 사용자 정보 설정(공용 컴퓨터에서 local 설정)
     + Quarto 프로젝트 폴더로 이동 : `cd ml-project`
     + `git config user.name "Name"`
     + `git config user.email "address@email.com"`
     + 설정 확인 : `git config --local --list`
  4. Git Pages 배포
     + Git 초기화 : `git init`
     + 기본 branch를 main으로 변경 : `git branch -m master main`
     + 파일 추가 : `git add -A`
     + 변경 내용 저장 : `git commit -m "Initial commit"`
     + GitHub 원격 저장소 연결 : `git remote add origin https://github.com/stat6503/ml-project.git`
     + 원격 저장소 연결 확인 : `git remote -v`
     + GitHub 설정 수정
       + GitHub → Repository → Setting → Pages → Branch: `main`, Folder: `/docs`
     + GitHub에 업로드 : `git push -u origin main`
  5. Git Pages 확인
     + https://stat6503.github.io/ml-project

<br>

+ 개인 컴퓨터에서 Git 사용자 정보 설정
  + Anaconda Prompt, Git Bash에서
  + `git config --global user.name "Name"`
  + `git config --global user.email "address@email.com"`
  + 설정 확인 : `git config --global --list`

<br>

+ 공용 컴퓨터에서 개인 정보 삭제
  + Anaconda Prompt에서 Quarto 프로젝트 폴더로 이동 : `cd ml-project`
    + `git config --unset user.name`
    + `git config --unset user.email`
    + `git credential-manager clear`
  + Quarto 프로젝트 폴더 삭제

