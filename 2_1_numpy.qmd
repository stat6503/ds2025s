---
jupyter: python3
---

<h1>3. Numpy</h1>

## 3.1. 넘파이 배열
+ NumPy 라이브러리
  + Numerical Python의 약자로, 과학적 연산과 수치 계산을 위한 Python 라이브러리
  + 대규모 다차원 배열 및 행렬 연산에 최적화되어 있으며, 빠르고 효율적인 데이터 처리를 지원함
 
<br>

+ 넘파이 배열(ndarray)
  + 동일한 자료형의 요소들로 구성된 다차원 배열
  + 일반적인 리스트보다 메모리 효율이 뛰어나고, 연산 속도도 훨씬 빠름
  + 순서가 있는(ordered) 구조로, 인덱싱과 슬라이싱을 통해 요소 접근 및 수정이 가능함

<br>

```{python}
# NumPy 라이브러리 설치
#!pip install numpy
```

```{python}
# NumPy 라이브러리 불러오기
import numpy as np
```

```{python}
# 넘파이 배열 생성1 : 리스트 사용
arr1 = np.array([1, 2, 3, 4])
print(arr1)
```

```{python}
# 넘파이 배열 생성2
# 하나의 배열에는 동일한 자료형만 저장할 수 있음
# 만약 숫자와 문자를 동시에 배열에 넣으면 모두 문자열로 취급됨
arr2 = np.array([1, 2, "A"])
print(arr2)
```

```{python}
# 넘파이 배열 생성3 : 2차원 배열
# 리스트를 중첩해서 인수로 넘겨 2차원 배열을 만듬
arr3 = np.array([[1, 2, 3, 4, 5],
                 [6, 7, 8, 9, 10]])
print(arr3)
```

```{python}
# 넘파이 배열 속성1 : 배열의 차원
arr3.ndim
```

```{python}
# 넘파이 배열 속성2 : 배열 요소의 자료형
arr3.dtype
```

```{python}
# 넘파이 배열 속성3 : 배열 요소의 byte 수
arr3.itemsize
```

```{python}
# 넘파이 배열 속성4 : 배열 요소의 개수
arr3.size
```

```{python}
# 넘파이 배열 속성5 : 배열 전체의 byte 수
arr3.nbytes
```

```{python}
# 넘파이 배열 속성6 : 배열의 모양(행, 열)
arr3.shape
```

```{python}
# 넘파이 배열 속성7 : 전치(transpose)
arr3.T
```

<br>

+ NumPy 라이브러리의 `arange()` 함수를 이용하여 등차수열을 생성할 수 있음
  + start : 시작 값
  + end : 끝 값 (포함하지 않음)
  + step : 차이 값; 간격(stride)

<br>

> numpy.arange(start, stop, step)

<br>

```{python}
# 등차수열 생성1 : 0부터 n-1까지 정수
arr4 = np.arange(5)
print(arr4)
```

```{python}
# 등차수열 생성2 : 시작 값, 끝 값 지정
arr5 = np.arange(2, 10)
print(arr5)  
```

```{python}
# 등차수열 생성3 : 간격 지정
arr6 = np.arange(1, 10, 2)
print(arr6)
```

```{python}
#| colab: {base_uri: https://localhost:8080/}
# 등차수열 생성4 : 실수(float) 간격 지정
arr7 = np.arange(0, 1, 0.2)
print(arr7)
```

<br>

## 3.2. 넘파이 배열 인덱싱
+ 넘파이 배열은 정수, 배열, 논리값(boolean) 등으로 인덱싱할 수 있음
+ 리스트 인덱싱과 마찬가지로 `[]`를 사용하며, 인덱스는 0부터 시작
+ 마스킹(masking), 논리값 인덱싱(boolean indexing)
  + 특정 조건에 맞는 데이터를 추출하는 것
  + 일반적으로 비교 연산자를 사용한 조건식을 사용함
  + 특히 데이터가 많을 때 반복문 없이 조건 검사가 가능하여 효율적임

<br>

```{python}
# 정수 인덱싱
arr8 = np.array([10, 20, 30, 40, 50])
print(arr8[1])
print(arr8[-2])
```

```{python}
# 배열 인덱싱
idx = np.array([0, 2])
print(arr8[idx])
```

```{python}
# 논리값(boolean) 인덱싱 : 조건을 만족하는 값 추출
mask = np.array([True, False, True, True, False])
print(arr8[mask])
print(arr8[arr8 > 25])                                            # 25보다 큰 값만 추출
```

<br>

## 3.3. 넘파이 배열 슬라이싱
+ 넘파이 배열에서 연속된 일부 요소를 잘라 추출하는 것
+ `[start:stop:step]`를 사용하여 범위를 지정함
  + start : 시작 인덱스
  + stop : 끝 인덱스 (포함하지 않음)
  + step : 증감 폭

<br>

```{python}
# 배열 슬라이싱1 : 1번 인덱스부터 4번 인덱스 전까지
arr9 = np.array([11, 12, 13, 14, 15])
print(arr9[1:4])
```

```{python}
# 배열 슬라이싱2 : 처음부터 3번 인덱스 전까지
print(arr9[:3])
```

```{python}
# 배열 슬라이싱3 : 2번 인덱스부터 끝까지
print(arr9[2:])            # [30 40 50] ()
```

```{python}
# 배열 슬라이싱4 : 요소를 2개씩 건너뛰기
print(arr9[::2])
```

```{python}
# 배열 슬라이싱5 : 역순 정렬
print(arr9[::-1])
```

<br>

## 3.4. 브로드캐스팅
+ 브로드캐스팅(broadcasting)
  + 서로 다른 형태의 배열 간 연산을 할 때 발생함
  + 작은 차원의 배열을 큰 차원의 배열에 맞게 자동으로 변환한 후, 요소별로 연산을 수행함

![](./images/fig2-1.png){width=70%}

<br>

```{python}
# 브로드캐스팅
arr10 = np.array([1, 2, 3, 4])
print(arr10 + 2)
print(arr10 * 2)
```

<br>

## 3.5. 넘파이 배열 복사
+ 얕은 복사
  + `=` 연산자 또는 `view()` 메소드를 사용한 복사
  + 데이터의 메모리 주소만 복사하여, 원본과 데이터를 공유함
  + 원본이나 복사본 중 하나를 수정하면 서로 영향을 미침

<br>

+ 깊은 복사
  + `copy()` 메소드를 사용한 복사
  + 완전히 새로운 메모리 공간에 데이터 전체를 복사함
  + 원본과 복사본이 독립적이며, 어느 쪽을 수정해도 서로 영향을 주지 않음

<br>

```{python}
#| colab: {base_uri: https://localhost:8080/}
# 얕은 복사
arr11 = np.arange(6)
copy1 = arr11

print(arr11)
print(copy1)
```

```{python}
# 복사본을 수정하면 원본도 변함
copy1[0] = 10
print(arr11)
print(copy1)
```

```{python}
#| colab: {base_uri: https://localhost:8080/}
# 깊은 복사
arr12 = np.arange(6)
copy2 = arr12.copy()

print(arr12)
print(copy2)
```

```{python}
# 복사본을 수정해도 원본이 변하지 않음
copy2[0] = 20
print(arr12)
print(copy2)
```

<br>

## 3.6. 배열 정렬
+ `np.sort(배열)` : 배열을 오름차순 정렬한 새로운 배열을 반환, 원본은 변하지 않음
+ `배열.sort()` : 배열을 오름차순 정렬하고, 원본 자체를 변경함
+ `np.argsort(배열)` : 정렬 시 각 요소가 위치하게 될 인덱스의 배열을 반환

<br>

```{python}
#| colab: {base_uri: https://localhost:8080/}
# 배열 정렬1
arr13 = np.array([3, 2, 5, 1, 4])
print(np.sort(arr13))
print(arr13)
```

```{python}
# 배열 정렬2
arr13.sort()
print(arr13)
```

```{python}
# 배열 정렬3
arr13 = np.array([3, 2, 5, 1, 4])
print(np.argsort(arr13))
```

