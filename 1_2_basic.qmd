---
jupyter: python3
---

<h1>2. 기초 문법</h1>

## 2.1. 변수
+ 변수(variable)
  + 값을 저장하는 공간
  + (할당) `변수명` = 값

<br>

+ 변수의 특징
  + 일시적으로 자료를 저장하는 공간으로, 변수에 저장된 값은 변할 수 있음
  + 숫자, 문자열 등 모든 자료형을 저장할 수 있고, 다른 변수의 값도 저장할 수 있음
  + 변수는 사용되기 전에 반드시 할당되어 있어야 함

<br>

+ 변수명 작성 규칙
  1. 영문자, 숫자, `_`로 구성될 수 있으며, 첫 글자는 반드시 영문자나 `_`로 시작함
  2. 공백을 포함할 수 없음
  3. 대문자와 소문자를 구별함
  4. Python에서 다른 용도로 사용되는 예약어는 사용할 수 없음

<br>

```{python}
# 변수 생성1 : 숫자
a = 100
print(a)
```

```{python}
# 변수 사용
print(a)
a = a + 50
print(a)
```

```{python}
# 변수 생성2 : 문자열
name = '이순신'
addr = "서울시"
print(name, addr)
```

```{python}
# 예약어
import keyword
print(keyword.kwlist)
```

<br>

+ \[Note\] 주석(comment)
  + 프로그램 안에서 코드가 아닌 텍스트로 작성되며, 프로그램 실행 시 무시됨
  + 코드의 기능을 설명하거나 알아야할 사항을 기록할 때 사용함
  + 한 줄 주석 처리 : `# comment`
  + 여러 줄 주석 처리 : `''' comment '''`, `""" comment """`

<br>

+ \[Note\] 기본 자료형

|자료형|의미|예시|
|:---:|:------|:------|
|int|integer, 정수|100|
|float|float, 부동 소수점|95.7|
|str|string, 문자열|'Lee'|
|bool|boolean, 부울|True <br>False|

<br>

```{python}
# 기본 자료형
print(type(100))
print(type(95.7))
print(type('Lee'))
print(type(True))
print(type(False))
```

<br>

## 2.2. 연산자
### 2.2.1. 산술 연산자

|연산자|의미|예시|결과|
|:---:|:------|:------|------:|
|+|더하기|10+20|30|
|-|빼기|10-20|-10|
|*|곱하기|10*20|200|
|/|나누기|10/20|0.5|
|//|나눈 정수 몫|10//20|0|
|%|나눈 나머지|10%20|10|
|**|거듭제곱|10**2|100|

<br>

### 2.2.2. 대입 연산자
+ 변수에 값을 할당(assignment)하는 연산자
+ 기본적으로 `=`를 사용하며, 산술 연산자와 함께 사용하면 할당을 보다 간결하게 할 수 있음


|연산자|의미|예시|
|:---:|:------------------|:------|
|=|왼쪽 변수에 오른쪽 값을 할당|x=10|
|+=|왼쪽 변수에 오른쪽 값을 더하고 결과를 왼쪽 변수에 할당|x+=10|
|-=|왼쪽 변수에 오른쪽 값을 빼고 결과를 왼쪽 변수에 할당|x-=10|
|\*=|왼쪽 변수에 오른쪽 값을 곱하고 결과를 왼쪽 변수에 할당|x\*=10|
|/=|왼쪽 변수에 오른쪽 값을 나눈 결과를 왼쪽 변수에 할당|x/=10|
|//=|왼쪽 변수에 오른쪽 값을 나눈 몫의 결과를 왼쪽 변수에 할당|x//=10|
|%=|왼쪽 변수에 오른쪽 값을 나눈 나머지의 결과를 왼쪽 변수에 할당|x%=10|
|**=|왼쪽 변수에 오른쪽 값만큼 거듭제곱을 하고 결과를 왼쪽 변수에 할당|x\*\*=2|

<br>

### 2.2.3. 비교 연산자
+ 두 개 이상의 식 또는 변수의 비교를 위해 사용하는 연산자
+ 결과는 참(True) 또는 거짓(False)으로 나타남
+ 단독으로 사용되는 경우보다는 주로 조건문과 반복문에서 사용됨


|연산자|의미|예시|결과|
|:---:|:------------------|:------|:------|
|==|값이 동일하다|10==20|False|
|!=|값이 동일하지 않다|10!=20|True|
|>|왼쪽 값이 오른쪽 값보다 크다|10>20|False|
|>=|왼쪽 값이 오른쪽 값보다 크거나 동일하다|10>=20|False|
|<|왼쪽 값이 오른쪽 값보다 작다|10<20|True|
|<=|왼쪽 값이 오른쪽 값보다 작거나 동일하다|10<=20|True|

<br>

### 2.2.4. 논리 연산자
+ 참(True)과 거짓(False)의 논리 동작을 다루는 연산자
+ 여러 조건을 조합할 때 주로 사용됨

|연산자|의미|예시|결과|
|:---:|:------------------|:------|:---|
|and|논리 AND 연산, 왼쪽 식과 오른쪽 식 모두 참인 경우에만 True|a=25 <br>print(a>8 and a<60)|True|
|or|논리 OR 연산, 왼쪽 식과 오른쪽 식 중 하나라도 참인 경우에만 True|a=70 <br>print(a<8 or a>=60)|True|
|not|논리 NOT 연산, 오른쪽 식이 참이면 False, 거짓이면 True|a=20 <br>print(not a==20)|False|


<br>

## 2.3. 표준 입출력
+ 표준 입력
  + 사용자로부터 값을 입력받기 위해 `input() 함수`를 사용함
  + `input()` 함수는 안내문을 출력한 후 사용자의 입력을 기다리며, 입력한 값을 문자열로 저장함
  + 입력한 값을 숫자로 사용하려면 `int()`, `float()` 함수를 이용하여 형 변환해야 함
  + `변수 = input(안내문)`

<br>

+ 표준 출력
  + 값을 출력하기 위해 `print()` 함수를 사용함
  + 여러 값을 `,`로 구분하여 출력할 수 있음
  + f-string 포맷팅
    + 문자열 맨 앞에 f를 붙이고 `{}` 안에 변수명을 직접 작성하여 출력하는 방식
    + 가독성이 좋고 사용 방법이 간단하여 자주 사용됨

<br>

```{python}
# 표준 입출력
#x = int(input('첫 번째 숫자 입력 : '))
#y = int(input('두 번째 숫자 입력 : '))
#print('두 수의 합 : ', x, ' + ', y, ' = ', x+y)
```

```{python}
# f-string 포맷팅
#print(f'두 수의 차 : {x} - {y} = {x-y}')
```

<br>

## 2.4. 컬렉션 자료형
### 2.4.1. 컬렉션 자료형
+ 컬렉션 자료형(collection data type)
  + 여러 개의 값을 하나의 변수에 저장할 수 있는 자료형
  + 대표적으로 리스트(list), 튜플(tuple), 딕셔너리(dictionary), 세트(set)가 있음

<br>

### 2.4.2. 리스트
+ 리스트(list)
  + 여러 개의 값을 저장할 수 있는 자료구조로, `[]` 안에 값을 `,`로 구분하여 나열함
  + 숫자형, 문자열, 리스트 등 서로 다른 자료형을 함께 저장할 수 있음
  + 순서가 있는(ordered) 구조로, 인덱스(index)를 통해 각 요소에 접근할 수 있음
    + 인덱싱(indexing) : `[index]`를 사용하여 리스트의 특정 위치에 있는 요소에 접근함
    + 슬라이싱(slicing) : `[start:stop]`를 사용하여 리스트의 일부 요소에 접근함
  + 한 번 생성한 후에도 값을 추가, 변경, 삭제할 수 있음

<br>

```{python}
# 리스트 생성1
x = [10, 20, 30]
print(x)
```

```{python}
# 리스트 생성2
y = [3.14, 'Park', [1, 2, 3], x]
print(y)
```

```{python}
# 리스트 인덱싱1 : 첫 번째 값 가져오기
x = [15, 25, 35, 45]
x[0]
```

```{python}
# 리스트 인덱싱2 : 마지막 값 가져오기
x[-1]
```

```{python}
# 리스트 슬라이싱1 : (stop index)는 포함하지 않음
x = [10, 20, 30, [40, 50]]
x[0:2]
```

```{python}
# 리스트 슬라이싱2
x[1:]
```

```{python}
# 리스트 슬라이싱3
x[:2]
```

```{python}
# 리스트 슬라이싱4 : 이중 리스트 슬라이싱
print(x[3])
print(x[3][0])
```

```{python}
# 리스트 변경
x = [10, 20, 30]
print(x)

x[0] = 50
print(x)

x[1:3] = [90, 100]
print(x)
```

<br>

### 2.4.3. 튜플
+ 튜플(tuple)
  + 여러 개의 값을 저장할 수 있는 자료구조로, `()` 안에 값을 `,`로 구분하여 나열함
  + 대부분 리스트와 비슷하지만, 한 번 저장한 값은 수정할 수 없음

<br>

```{python}
# 튜플 생성1 : 빈 튜플 생성
x = ()                                                            # x = tuple()
print(x)
```

```{python}
# 튜플 생성2
x = (1, 2, 3)
print(x)
```

```{python}
# 튜플 생성3 : ()를 생략할 수 있음
x = 1, 2, 3
print(x)
```

```{python}
# 튜플 생성4 : 0에서 9까지 정수 생성
x = tuple(range(10))
print(x)
```

```{python}
# 튜플 생성5 : 리스트를 튜플로 자료형 변환
x = ['월', '화', '수', '목', '금', '토', '일']
x = tuple(x)
print(x)
```

```{python}
# 튜플 변경 : Error!
#x = (10, 20, 30)
#x[0] = 100
```

```{python}
# 튜플 인덱싱
x = (10, 20, 30, 40)
x[-1]
```

```{python}
# 튜플 슬라이싱
x[:2]
```

<br>

### 2.4.4. 딕셔너리
+ 딕셔너리(dictionary)
  + 연관된 값을 키-값(key-value) 쌍으로 저장하는 자료구조로, `{}` 안에 `key: value` 값을 `,`로 구분하여 나열함
  + 리스트나 튜플과 달리, 인덱스가 아닌 키(key)를 통해 값(value)에 접근함

<br>

```{python}
# 딕셔너리 생성1 : 빈 딕셔너리 생성
x = {}                                                            # x = dict()
print(x)
```

```{python}
# 딕셔너리 생성2
menu = {'김밥': 3000, '라면': 5000}
print(menu)
```

```{python}
# 딕셔너리 요소 접근1
menu['김밥']
```

```{python}
# 딕셔너리 요소 접근2
menu['어묵'] = 1500
print(menu)
```

```{python}
# 딕셔너리 요소 접근3 : Error!
#menu['순대']
```

<br>

### 2.4.5. 세트
+ 세트(set)
  + 집합에 관련된 것을 쉽게 처리하게 만든 자료구조로, `{}` 안에 값을 `,`로 구분하여 나열함
  + 중복을 허용하지 않으며, 순서가 없어 인덱스로 각 요소에 접근할 수 없음

<br>

```{python}
# 세트 생성1
x = {10, 20, 30, 10}
print(x)
```

```{python}
# 세트 생성2
x = set([10, 20, 30])
print(x)
```

<br>

## 2.5. 리스트 컴프리헨션
+ 리스트 컴프리헨션(list comprehension)
  + 원하는 자료들을 조회 또는 추출하여 리스트로 변환하는 표현식
  + 조건식을 이용하여 같은 연산을 전체 항목이나 일부 항목에 적용할 수 있음

<br>

> **\[표현식 for 변수 in 항목들 if 조건\]**

<br>

+ 리스트 컴프리헨션 처리 과정
  1. 항목들을 순차적으로 하나씩 꺼내옴
  2. 조건식을 적용하여 해당 조건에 맞는 항목은 추출하고, 조건에 맞지 않으면 무시함
  3. 위에서 추출한 항목을 리스트에 추가함


<br>

```{python}
# 리스트 컴프리헨션1 : 조건이 없는 경우
num = [-20, -10, 0, 0, 10, 20]
[x + 5 for x in num]
```

```{python}
# 리스트 컴프리헨션2 : 조건이 있는 경우
[1/x for x in num if x>0]
```

<br>

## 2.6. 선택문
+ 선택문
  + if 문을 이용하여 조건식이 True일 때만 코드를 실행하는 선택 구조

![](./images/fig1-1.jpg){width=80%}
![](./images/fig1-2.jpg){width=80%}
![](./images/fig1-3.jpg){width=80%}
![](./images/fig1-4.jpg){width=80%}

```{python}
# 무작위로 1~100 사이의 두 정수를 생성한 후, 큰 수부터 작은 수 순으로 출력
import random
a = random.randint(1, 100)
b = random.randint(1, 100)

if a<b:
    a, b = b, a

print(a, b)
```

<br>

## 2.7. 반복문
+ 반복문
  + 일정한 횟수나 조건식을 만족하는 동안 코드를 반복 실행하는 제어 구조
  + for 문 : 주어진 범위만큼 코드를 반복 실행
  + while 문 : 조건식이 True인 동안 코드를 반복하다가, False가 되면 종료

![](./images/fig1-5.jpg){width=80%}
![](./images/fig1-6.jpg){width=80%}
![](./images/fig1-7.jpg){width=80%}

```{python}
# for 문 : 문자열을 3번 반복해서 출력
for i in range(3):
    print("Hello!")
```

```{python}
# for 문 : 반복범위의 값을 출력
for i in range(5):
    print(i)
```

```{python}
# while 문 : 1~100 정수의 합 계산
sum = 0
num = 1

while num <= 100:
    sum += num
    num += 1

print(sum)
```

<br>

## 2.8. 함수
+ 함수(function)
  + 특정한 기능을 수행하도록 미리 만들어 놓고, 필요할 때마다 호출하여 사용하는 일련의 코드
  + Python에서 제공하는 내장 함수와 사용자가 직접 정의하는 사용자 정의 함수가 있음

<br>

+ 함수를 사용하는 이유
  1. 중복된 코드를 함수로 분리하면 코드의 양이 줄어들고 가독성이 향상됨
  2. 코드가 간결해져 전체 기능을 더 쉽게 이해할 수 있음
  3. 프로그램의 흐름을 파악하기 쉬워져 유지·보수가 편리함
  4. 필요한 기능만 함수로 정의해두면, 다른 프로그램에서 쉽게 재사용할 수 있어 효율적임

<br>

```{python}
# enumerate() 함수 : for 문과 함께 사용하여 인덱스와 해당 값을 출력
for x, name in enumerate(['수박', '참외', '자두']):
    print(x, name)
```

```{python}
# zip() 함수 : 두 리스트의 원소에 차례로 접근하여 짝을 지어 딕셔너리로 반환
num = [1, 2, 3]
char = ['A', 'B', 'C']
dict(zip(num, char))
```

```{python}
# random() 함수 : 0.0과 1.0 사이의 임의의 실수 반환(0.0은 포함하나, 1.0은 포함하지 않음)
import random
for i in range(10):
    x = random.random()
    print(x)
```

<br>

+ 사용자 정의 함수
  + 인수(argument) : 호출된 함수에 전달할 값
  + 매개변수(parameter) : 호출된 함수에서 전달받은 값을 임시로 할당하는 변수
  + 반환값(return value) : 매개변수로부터 처리된 작업의 결과로, 호출한 함수로 값이 반환됨

<br>

> **def 함수명(매개변수1, 매개변수2, …):** <br>
>　　**문장** <br>
>　　**return 반환값**

<br>

+ 함수명 작성 규칙
  + 변수명 작성 규칙과 동일함
  + 일반적으로 소문자로 입력
  + 작업을 나타내기 위해 동사와 명사를 함께 사용하는 경우가 많음 - (예) find_number
  + 외부에 공개하는 함수일 경우 줄임말을 사용하지 않고 짧고 명료한 이름으로 정함

<br>

```{python}
# 사용자 정의 함수 : 두 개의 수를 입력받아 큰 수를 반환하는 함수
def max(num1, num2):
    if num1 > num2:
        return num1
    else:
        return num2

#x = int(input('첫 번째 정수 입력 : '))
#y = int(input('두 번째 정수 입력 : '))
#print('큰 수 : ' max(x, y))
```

<br>

+ 람다 함수(lambda function)
  + 이름 없이 일시적으로 정의하여 사용할 수 있는 익명 함수
  + 간단한 함수를 짧게 작성할 수 있어, 다른 함수의 인수로 자주 사용됨

<br>

> **lambda 매개변수들: 식**

<br>

```{python}
# 사용자 정의 함수
def plus_five(x):
    return x+5

plus_five(20)
```

```{python}
# 람다 함수
(lambda x: x+5)(20)
```

```{python}
# 람다 표현식을 인수로 사용
# map() 함수 : iterable 객체의 모든 요소에 특정 함수를 적용한 결과를 반환
result = map(lambda x: x+5, [15, 25, 35])
print(list(result))
```

