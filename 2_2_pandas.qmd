---
jupyter: python3
---

<h1>4. Pandas</h1>

## 4.1. 데이터프레임
+ Pandas 라이브러리
  + NumPy 라이브러리를 기반으로 개발된 Python 데이터 분석 라이브러리
  + 다양한 형태의 데이터를 효율적으로 처리하고 탐색할 수 있음
  + 필터링, 정렬, 그룹화, 집계, 결측치 처리 등 다양한 분석 기능 제공

<br>

+ 시리즈(Series)
  + 1차원 데이터를 다루는 자료구조
  + 리스트와 달리 각 데이터에 인덱스를 지정할 수 있음

<br>

+ 데이터프레임(DataFrame)
  + 2차원 데이터를 다루는 자료구조
  + 행(row)과 열(column)로 이루어진 표(table) 형태의 구조를 가짐
    + 행(row) : 각 개별 데이터를 표현하며, 케이스(case)라고도 함
    + 열(column) : 속성을 표현하며, 변수(variable)라고도 함 
    + 인덱스(index) : 각 개별 데이터를 특정할 수 있는 고유의 값으로, 행을 구분함
  + 열 단위로 서로 다른 자료형을 저장할 수 있으며, 각 열에는 동일한 자료형만 포함되어야 함

<br>

![](./images/fig2-2.jpg){width=50%}

<br>

## 4.2. 데이터프레임 생성
+ 데이터프레임 생성
  1. Pandas 라이브러리의 `DataFrame()` 함수
     + 데이터를 직접 입력하는 방법으로, 일반적으로 딕셔너리를 많이 사용함
       + 키(key) : 열 이름
       + 값(value) : 각 열의 데이터
  3. Pandas 라이브러리의 `read_csv()` 함수
     + 외부에 있는 csv 파일을 읽어 데이터프레임으로 생성함
     + 한글이 포함된 경우 `encoding='euc-kr'` 또는 `encoding='cp949'` 옵션을 지정해야 함
     + \[실습파일\] [exam.csv](./data/exam.csv), [music.csv](./data/music.csv), [weather.csv](./data/weather.csv), [train.csv](./data/train.csv)

<br>

```{python}
# Pandas 라이브러리 설치
#!pip install pandas
```

```{python}
# Pandas 라이브러리 불러오기
import pandas as pd
```

```{python}
#| colab: {base_uri: https://localhost:8080/}
# 데이터프레임 생성1
df = pd.DataFrame({
    'name': ['Jang', 'Yang', 'Oh'],
    'dept': ['computer', 'english', 'math'],
    'score': [100, 90, 50]})
df
```

```{python}
# 데이터프레임 생성2
df = pd.read_csv('./data/exam.csv')
df
```

<br>

## 4.3. 데이터프레임 확인
+ 데이터 분석 시 가장 먼저 데이터의 전반적인 구조를 파악해야 함

<br>

```{python}
# 데이터 불러오기
df = pd.read_csv("./data/music.csv")
df
```

```{python}
# 변수 속성
df.info()
```

```{python}
# 데이터 앞부분/뒷부분
df.head()
# df.tail()
```

```{python}
#| colab: {base_uri: https://localhost:8080/}
# 요약 통계량 : 수치형 변수
df.describe()
```

```{python}
#| colab: {base_uri: https://localhost:8080/, height: 270}
# 요약 통계량 : 문자형 변수
df.describe(include='object')
```

```{python}
# 인덱스
df.index
```

```{python}
# 열
df.columns
```

```{python}
# 각 열의 자료형
df.dtypes
```

```{python}
# 정렬 : 오름차순(기본)
df.sort_values('release_date')
```

```{python}
# 빈도
cnt = df['agency'].value_counts()
pd.DataFrame(cnt)
```

```{python}
# 고유값
df['agency'].unique()
```

<br>

## 4.4. 데이터프레임 선택

![](./images/fig2-3.jpg){width=70%}

<br>

### 4.4.1. 열 선택
+ 데이터프레임에서 특정 열을 선택할 때는 `[]` 안에 열 이름을 문자열로 입력함
  + 여러 개의 열을 선택하는 경우, 열 이름을 리스트로 전달함
+ 하나의 열만 선택하는 경우, `(데이터프레임 이름).(열 이름)` 형식으로도 접근할 수 있음
   
<br>

```{python}
# 열 선택1
df = pd.read_csv('./data/weather.csv', encoding='cp949')
df['평균기온']
```

```{python}
# 열 선택2
df[['최저기온', '최고기온']]
```

<br>

### 4.4.2. 레이블이나 조건 표현으로 선택
+ 레이블(label)을 기반으로 행과 열을 선택할 때 `loc[]` 속성을 사용함
  + 열 이름을 이용하여 특정 열을 선택할 수 있음
  + 인덱스 이름을 이용하여 특정 행을 선택할 수 있음
  + 조건식을 사용하여 특정 조건을 만족하는 행을 선택할 수 있음
    + 조건이 2개 이상인 경우, 각 조건을 `()`로 묶고 논리 연산자(`&`, `|`, `~`)를 사용함

<br>

```{python}
# 열 선택3
df.loc[:, ['날짜', '최고기온']]
```

```{python}
# 행 선택1
df.loc[0:3,]
```

```{python}
# 행 선택2 : 날짜 데이터를 인덱스로 지정 후, 특정 날짜에 해당하는 행 선택
df.index = df['날짜']
df.loc['2022-06-05']
```

```{python}
# 헹 선택3 : 조건을 만족하는 행 선택
df.loc[df['평균기온']>=25]
```

<br>

### 4.4.3. 불 인덱싱
+ 조건식을 사용하면 각 행이 조건을 만족하는지 여부를 `True` 또는 `False`로 반환함
+ 그 결과인 부울(boolean)형 시리즈를 `[]`에 전달하면 `True`에 해당하는 행만 선택할 수 있음
+ 조건이 2개 이상인 경우, 각 조건을 `()`로 묶고 논리 연산자(`&`, `|`, `~`)를 사용함

<br>

```{python}
# 불 인덱싱1 : 조건을 만족하는 행 선택
w = df['최고기온']>=30
df[w]
```

```{python}
# 불 인덱싱2 : 조건을 만족하는 행과 특정 열 선택
w = df['최고기온']>=30
df[w][['최저기온', '최고기온']]
```

```{python}
# 불 인덱싱3 : 제일 더웠던 날 선택
w = df['최고기온']==df['최고기온'].max()
df[w]
```

```{python}
# [Note] 특정 조건을 만족하는 데이터 선택
df.query('최고기온-최저기온>=10')
```

<br>

## 4.5. 데이터 가공 및 그룹핑
### 4.5.1. 데이터 가공
+ `drop()` 메소드를 이용하여 특정 행 또는 열을 삭제할 수 있음
  + 행 삭제(axis=0) : index 인자에 삭제할 행에 대한 인덱스를 지정함
    + 특정 조건을 만족하는 행의 위치에 대한 인덱스를 추출하려면 `index` 속성을 이용함
  + 열 삭제(axis=1) : columns 인자에 삭제할 열 이름을 리스트 형태로 지정함
  + 원본 데이터를 직접 수정하려면 `inplace=True` 옵션을 지정함

<br>

```{python}
#| colab: {base_uri: https://localhost:8080/, height: 206}
# 데이터 불러오기
df = pd.read_csv("./data/music.csv")
df
```

```{python}
#| colab: {base_uri: https://localhost:8080/, height: 206}
# 여러 개의 열 삭제
df.drop(columns = ['sortation', 'agency'], inplace=True)
df.columns
```

```{python}
# 열 이름 변경
df.columns = ['제목', '이름', '인원수', '발매일', '장르', '유형']
df.head()
```

```{python}
# 발매일 변수를 datetime 형식으로 변환
df['발매일'] = pd.to_datetime(df['발매일'])
df.dtypes
```

```{python}
# 새로운 열 생성
df['년도'] = df['발매일'].dt.year
df['월'] = df['발매일'].dt.month
df['일'] = df['발매일'].dt.day
df.head()
```

<br>

### 4.5.2. 데이터 그룹핑
+ `groupby()` 메소드를 이용하여 특정 열을 기준으로 데이터를 그룹화할 수 있음
+ 통계량을 산출하는 메소드 `mean()`, `std()`, `var()`, `max()`, `min()`, `mode()` 등과 함께 사용됨

<br>

```{python}
#| colab: {base_uri: https://localhost:8080/, height: 347}
# 데이터 그룹핑1
newdata = df.groupby(['장르']).count()                            # df.value_counts('장르')
pd.DataFrame(newdata['제목'])
```

```{python}
#| colab: {base_uri: https://localhost:8080/, height: 253}
# 데이터 그룹핑2
newdata = df.groupby(['장르'])['인원수'].mean()
pd.DataFrame(newdata)
```

<br>

## 4.6. 결측 데이터 처리
+ 결측 데이터(missing value)
  + Pandas는 누락된 데이터를 `NaN`(Not a Number)로 표기하며, 연산 시 자동으로 제외됨
  + `isna()`, `isnull()` 메소드를 이용하면 결측값을 확인할 수 있음

<br>

+ 결측 데이터 처리
  + 가장 간단한 방법은 `dropna()` 메소드를 이용하여 결측값이 포함된 행이나 열을 삭제하는 것임
    + `axis=0`이면 행, `axis=1`이면 열을 삭제함
  + `fillna()` 메소드를 이용하여 결측값을 최빈값이나 평균으로 대체할 수도 있음

<br>

```{python}
# 데이터 불러오기
df = pd.read_csv("./data/train.csv")
df
```

```{python}
# 결측값 확인
df[df['Embarked'].isna()]
```

```{python}
# 각 열별 결측값 개수 확인
df.isnull().sum()
```

```{python}
# 결측값이 포함된 열 삭제
df.drop('Cabin', axis=1, inplace=True)
df.columns
```

```{python}
# 결측값이 포함된 행 삭제
df.dropna(axis=0)
```

```{python}
# 결측값을 최빈값으로 대체
embarked_mode = df['Embarked'].mode()[0]
df['Embarked'] = df['Embarked'].fillna(embarked_mode)
df.isnull().sum()
```

```{python}
# 결측값을 평균으로 대체
age_mean = df['Age'].mean()
df['Age'] = df['Age'].fillna(age_mean)
df.isnull().sum()
```

